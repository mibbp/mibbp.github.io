<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>良心的题面题解二进制处理</title>
    <url>/2021/12/15/3678-%E8%89%AF%E5%BF%83%E7%9A%84%E9%A2%98%E9%9D%A2%E9%A2%98%E8%A7%A3%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>　原题：<a href="http://www.fjutacm.com/Problem.jsp?pid=3678">http://www.fjutacm.com/Problem.jsp?pid=3678</a></p>
<p>　　这个题有两种情况一种是只有一个出现了奇数次很简单直接异或就可以了，另一种是两个出现了奇数次，重点就说这个。</p>
<p>　　就先按照只有一个的思路全部异或然后剩下的那个数字是a,b（两个出现了奇数次的数）异或的值x，找到其中一个就能找到另外一个，所以就找不同就行了，他俩不同的地方就在于，他俩的二进制一定存在一位不同，这一位异或的值一定是一，所以找到这一位就可以了，我是从最低位开始找，找到这一位就标记一下，然后把输入的数，只要这一位是1的全部跟这个x再异或一次，出现偶数次的会抵消，没有抵消的一定是出现了奇数次的而且这一位是1的，那么剩下的那个值就是出现了奇数次且这一位是0的，答案就出来了。</p>
<p>　　代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3000010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,x,ans=<span class="number">0</span>,ans1=<span class="number">0</span>,ans2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m))&#123;</span><br><span class="line">        ans=<span class="number">0</span>,ans1=<span class="number">0</span>,ans2=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> vis;</span><br><span class="line">        <span class="keyword">if</span>(m==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">                ans^=x;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">                ans^=a[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">40</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ans&amp;(<span class="number">1</span>&lt;&lt;i))&#123;</span><br><span class="line">                    vis=i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans1=ans;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]&amp;(<span class="number">1</span>&lt;&lt;vis))&#123;</span><br><span class="line">                    ans^=a[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans2=ans;</span><br><span class="line">            ans1=ans1^ans2;</span><br><span class="line">            <span class="keyword">if</span>(ans1&gt;ans2)<span class="built_in">swap</span>(ans1,ans2);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,ans1,ans2);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>ACM训练半年总结</title>
    <url>/2021/12/15/ACM%E8%AE%AD%E7%BB%83%E5%8D%8A%E5%B9%B4%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>我上大学以来最正确的决定就是加入了acm，我第一次看到acm招新是在8月底9月初，然后进了acm招新群，然后就就开始自学c语言，那时候暑假没事干就天天写代码，没事还老问谢队题，现在看我问的那些问题是真nt,不过要是当初没问的话我可能现在已经不是acm的一员了。</p>
<p>　　开学第一天就被学姐采访，问我大学最想做的三件事是啥，我说的第一件应该就是进acm打比赛，不是第一件就是第二件，然后就正常的学习（放假，刚开学真的巨闲），然后进行了一次面试吧，准备了很多，面试也挺顺利的吧，学长跟我说我面试成绩不错好好努力有希望进当时反正挺开心的，不过那时候还不认识学长，面试的时候也不认识，，但是谢队跟我说他不在，但其实他在，所以导致我一段时间都认错了人。</p>
<p>　　后来开始刷题慢慢接触了一点点算法，c语言也学了一大半了，就要开始招新赛了，招新赛前一天有个热身赛，挺简单的吧很快就做完了，拿了个第一挺开心，也很激动，其实我每次比赛都很紧张激动，当时我还是比较自信的，因为真的比别人学的很多付出的时间也多的多，学长也很看好我，就导致我开始飘了，在招新赛，a了两题就写不出来了，现在想想是真fw，当时是真的给我好好上了一课，然后巨失落颓废，觉得自己可能选不上了，毕竟10道题才写了两道，正常情况肯定不会要我，不过最后学长给了我机会，所以其实我还是很感谢谢队的，无论是刚开始的教导还是让我进入acm，最后幸运的以倒数第一进入了acm的新生队伍吧。</p>
<p>　　后来开始选学长，我选了跟我同专业的姜学长，因为我一开始看学长没人选想着如果学长只教我一个那不好吗，结果后来又有两个人来虽然有一个退队了，学长还是很负责任的，也很照顾我吧无论是学习上还是生活上，也很感谢学长，后来的第一次周赛，我很想证明自己，因为我真的觉得自己比别人都努力的多，付出的多，不应该是这个成绩，然后我又拿了个倒数，当时我就接受了自己真的很菜的事实，然后开始怀疑自己还是不是不适合打ACM，那个时候都有点自闭了，后来看到了谢队的博客，貌似他一开始也是倒一进来的，反正看完之后也振作起来了，加上姜学长的教导，就想着慢慢努力吧一点一点进步，然后下次就变成了中间水平了，后来每周的学习任务很多，要刷的题也能越来越多越来越难，很多人可能跟不上了，我还是继续挤时间去学习，把每周的任务都完成的同时去刷更多的题，然后每次比赛都会去补题，这也可能是我的优势吧，之后几次比赛都有之前出现过的题，我都能写对，但他们很多人都忘了这是原题，后来的名次也越来越好，还在一次有大二大三学长参赛的比赛ak拿了第一还是很满意的了，到现在实际刷了有三百多道题，有用的刷了也有二百多道题了，算是入门了吧，代码水平也确实提升了很多，自学能力也越来越强，身边的人也越来越优秀，总的来说在acm的半年学到的还是很多的，希望下学期可以继续加油争取拿点奖吧，我这个人关键时刻老掉链子，主要是打比赛我是真紧张。</p>
]]></content>
  </entry>
  <entry>
    <title>CatchCrazyCat源码</title>
    <url>/2022/01/05/CatchCrazyCat%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<h1 id="CatchCrazyCat源码"><a href="#CatchCrazyCat源码" class="headerlink" title="CatchCrazyCat源码"></a>CatchCrazyCat源码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Dot.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.catchcrazycat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dot</span> </span>&#123;<span class="comment">//落点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x,y;<span class="comment">//坐标</span></span><br><span class="line">    <span class="keyword">int</span> status;<span class="comment">//当前棋子状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_ON=<span class="number">1</span>;<span class="comment">//路障</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_OFF=<span class="number">0</span>;<span class="comment">//空位</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_IN=<span class="number">9</span>;<span class="comment">//猫</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dot</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;<span class="comment">//有参构造初始化坐标和状态</span></span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">        status=STATUS_OFF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//getter，setter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setXY</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x=x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MainActivity.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.catchcrazycat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"><span class="comment">//        setContentView(R.layout.activity_main);</span></span><br><span class="line">        setContentView(<span class="keyword">new</span> Playground(<span class="keyword">this</span>));</span><br><span class="line"><span class="comment">//        TextView tv_one =findViewById(R.id.tv_one);</span></span><br><span class="line"><span class="comment">//        tv_one.setText(&quot;红色点表示神经猫，白色点表示空位，黄色点表示路障&quot;+</span></span><br><span class="line"><span class="comment">//                &quot;游戏目的：阻止红点逃脱地图&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;游戏玩法：每回合玩家可以选择一个空位放置路障，神经猫则会移动一位&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Playground.java</span></span><br><span class="line"><span class="keyword">package</span> com.example.catchcrazycat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.graphics.RectF;</span><br><span class="line"><span class="keyword">import</span> android.media.Image;</span><br><span class="line"><span class="keyword">import</span> android.view.Gravity;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.SurfaceHolder;</span><br><span class="line"><span class="keyword">import</span> android.view.SurfaceView;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.View.OnTouchListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"><span class="keyword">import</span> android.widget.LinearLayout;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Playground</span> <span class="keyword">extends</span> <span class="title">SurfaceView</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnTouchListener</span> </span>&#123;<span class="comment">//游戏背景棋盘</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> WIDTH=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ROW=<span class="number">15</span>;<span class="comment">//定义行列数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COL=<span class="number">15</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> Blocks=<span class="number">25</span>;<span class="comment">//路障数量</span></span><br><span class="line">    <span class="keyword">boolean</span> firstStep;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Dot matrix[][];<span class="comment">//创建二维矩阵棋盘</span></span><br><span class="line">    <span class="keyword">private</span> Dot Cat;<span class="comment">//猫</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Playground</span><span class="params">(Context context)</span> </span>&#123;<span class="comment">//背景创建初始化</span></span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        getHolder().addCallback(callback);</span><br><span class="line">        matrix=<span class="keyword">new</span> Dot[ROW][COL];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ROW;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;COL;j++)&#123;</span><br><span class="line">                matrix[i][j]=<span class="keyword">new</span> Dot(j,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        setOnTouchListener(<span class="keyword">this</span>);</span><br><span class="line">        initGame();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span>  Dot <span class="title">getDot</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> matrix[y][x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span>  <span class="keyword">boolean</span> <span class="title">isAtEdge</span><span class="params">(Dot d)</span></span>&#123;<span class="comment">//判断是否到边界</span></span><br><span class="line">        <span class="keyword">if</span>(d.getX()*d.getY()==<span class="number">0</span>||d.getX()+<span class="number">1</span>==COL||d.getY()+<span class="number">1</span>==ROW)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Dot <span class="title">getNeighbor</span><span class="params">(Dot one,<span class="keyword">int</span> dir)</span></span>&#123;<span class="comment">//移动到相邻点</span></span><br><span class="line">        <span class="keyword">switch</span>(dir)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> getDot(one.getX()-<span class="number">1</span>,one.getY());</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span>(one.getY()%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> getDot(one.getX()-<span class="number">1</span>,one.getY()-<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> getDot(one.getX(),one.getY()-<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">if</span>(one.getY()%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> getDot(one.getX(),one.getY()-<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> getDot(one.getX()+<span class="number">1</span>,one.getY()-<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">return</span> getDot(one.getX()+<span class="number">1</span>,one.getY());</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">if</span>(one.getY()%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> getDot(one.getX(),one.getY()+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> getDot(one.getX()+<span class="number">1</span>,one.getY()+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="keyword">if</span>(one.getY()%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> getDot(one.getX()-<span class="number">1</span>,one.getY()+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> getDot(one.getX(),one.getY()+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getDistance</span> <span class="params">(Dot one ,<span class="keyword">int</span> dir)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> distance =<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(isAtEdge(one))<span class="keyword">return</span> distance;</span><br><span class="line"><span class="comment">//        if(one.getStatus()!=Dot.STATUS_IN)return -1;</span></span><br><span class="line">        Dot ori =one,next;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;<span class="comment">//BFS搜索距离（后面有时间的话再用A*优化）</span></span><br><span class="line"><span class="comment">//            distance++;</span></span><br><span class="line">            next=getNeighbor(ori,dir);</span><br><span class="line">            <span class="keyword">if</span>(next.getStatus()==Dot.STATUS_ON)&#123;</span><br><span class="line">                <span class="keyword">return</span> distance*-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isAtEdge(next))&#123;</span><br><span class="line">                distance++;</span><br><span class="line">                <span class="keyword">return</span> distance;</span><br><span class="line">            &#125;</span><br><span class="line">            distance++;</span><br><span class="line">            ori=next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移动操作</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MoveTo</span><span class="params">(Dot one)</span></span>&#123;</span><br><span class="line">        one.setStatus(Dot.STATUS_IN);</span><br><span class="line">        getDot(Cat.getX(),Cat.getY()).setStatus(Dot.STATUS_OFF);</span><br><span class="line">        Cat.setXY(one.getX(),one.getY());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//逃脱算法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isAtEdge(Cat))&#123;</span><br><span class="line">            lose();</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        Vector &lt;Dot&gt; avaliable=<span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        Vector &lt;Dot&gt; positive=<span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        HashMap&lt;Dot,Integer&gt; al =<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            Dot n=getNeighbor(Cat,i);</span><br><span class="line">            <span class="keyword">if</span>(n.getStatus()==Dot.STATUS_OFF)&#123;</span><br><span class="line">                avaliable.add(n);</span><br><span class="line">                <span class="keyword">int</span> Dis=getDistance(n,i);</span><br><span class="line">                al.put(n,Dis);</span><br><span class="line"></span><br><span class="line"><span class="comment">//                System.out.println(&quot;x:&quot;+n.getX()+&quot; Y:&quot;+n.getY()+&quot; 方向：&quot;+i+&quot; 距离:&quot;+Dis);</span></span><br><span class="line">                <span class="keyword">if</span>(Dis&gt;<span class="number">0</span>)</span><br><span class="line">                    positive.add(n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(avaliable.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            win();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(avaliable.size()==<span class="number">1</span>)&#123;</span><br><span class="line">            MoveTo((avaliable.get(<span class="number">0</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            Dot best=<span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(positive.size()!=<span class="number">0</span>)&#123;<span class="comment">//存在直接逃脱的方向</span></span><br><span class="line">                <span class="keyword">int</span> min=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; positive.size(); i++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> a=al.get(positive.get(i));</span><br><span class="line">                    <span class="keyword">if</span>(a&lt;min)&#123;</span><br><span class="line">                        min=a;</span><br><span class="line">                        best=positive.get(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;<span class="comment">//所有方向都有路障</span></span><br><span class="line">                <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; avaliable.size(); i++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> k=al.get(avaliable.get(i));</span><br><span class="line">                    <span class="keyword">if</span>(k&lt;max)&#123;</span><br><span class="line">                        max=k;</span><br><span class="line">                        best=avaliable.get(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            MoveTo(best);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">lose</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Toast toast=Toast.makeText(getContext(),<span class="string">&quot;You Lose&quot;</span>,Toast.LENGTH_LONG);</span><br><span class="line">        toast.setGravity(Gravity.CENTER,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        toast.show();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">win</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Toast toast=Toast.makeText(getContext(),<span class="string">&quot;You Win!&quot;</span>,Toast.LENGTH_LONG);</span><br><span class="line">        toast.setGravity(Gravity.CENTER,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        toast.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">redraw</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Canvas c=getHolder().lockCanvas();</span><br><span class="line">        c.drawColor(Color.LTGRAY);<span class="comment">//绘制背景为灰色</span></span><br><span class="line">        Toast.makeText(getContext(),<span class="string">&quot;红色点表示神经猫，白色点表示空位，黄色点表示路障&quot;</span>+</span><br><span class="line">                <span class="string">&quot;游戏目的：阻止红点逃脱地图&quot;</span> +</span><br><span class="line">                <span class="string">&quot;游戏玩法：每回合玩家可以选择一个空位放置路障，神经猫则会移动一位&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">        Paint paint =<span class="keyword">new</span> Paint();</span><br><span class="line">        paint.setFlags(Paint.ANTI_ALIAS_FLAG);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ROW; i++) &#123;<span class="comment">//绘制所有点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;COL ; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> offset=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(j%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">                    offset=WIDTH/<span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Dot one = getDot(i,j);</span><br><span class="line">                <span class="keyword">switch</span> (one.getStatus())&#123;</span><br><span class="line">                    <span class="keyword">case</span> Dot.STATUS_OFF:</span><br><span class="line">                        paint.setColor(<span class="number">0xFFEEEEEE</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> Dot.STATUS_ON:</span><br><span class="line">                        paint.setColor(<span class="number">0xFFFFAA00</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> Dot.STATUS_IN:</span><br><span class="line">                        paint.setColor(<span class="number">0xFFFF0000</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                c.drawOval(<span class="keyword">new</span> RectF(one.getX()*WIDTH+offset,one.getY()*WIDTH</span><br><span class="line">                        ,(one.getX()+<span class="number">1</span>)*WIDTH+offset,(one.getY()+<span class="number">1</span>)*WIDTH),paint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        getHolder().unlockCanvasAndPost(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SurfaceHolder.Callback callback =<span class="keyword">new</span> SurfaceHolder.Callback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceCreated</span><span class="params">(<span class="meta">@NonNull</span> SurfaceHolder surfaceHolder)</span> </span>&#123;</span><br><span class="line">            redraw();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceChanged</span><span class="params">(<span class="meta">@NonNull</span> SurfaceHolder surfaceHolder, <span class="keyword">int</span> i, <span class="keyword">int</span> i1, <span class="keyword">int</span> i2)</span> </span>&#123;</span><br><span class="line">            WIDTH=i1/(COL+<span class="number">1</span>);</span><br><span class="line">            redraw();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceDestroyed</span><span class="params">(<span class="meta">@NonNull</span> SurfaceHolder surfaceHolder)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initGame</span><span class="params">()</span></span>&#123;<span class="comment">//游戏初始化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ROW;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;COL;j++)&#123;</span><br><span class="line">                matrix[i][j].setStatus(Dot.STATUS_OFF);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Cat =<span class="keyword">new</span> Dot(<span class="number">7</span>,<span class="number">8</span>);</span><br><span class="line">        getDot(<span class="number">7</span>,<span class="number">8</span>).setStatus(Dot.STATUS_IN);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Blocks; ) &#123;</span><br><span class="line">            <span class="keyword">int</span> x=(<span class="keyword">int</span>)((Math.random()*<span class="number">1000</span>)%COL);</span><br><span class="line">            <span class="keyword">int</span> y=(<span class="keyword">int</span>)((Math.random()*<span class="number">1000</span>)%ROW);</span><br><span class="line">            <span class="keyword">if</span>(getDot(x,y).getStatus()==Dot.STATUS_OFF)&#123;</span><br><span class="line">                getDot(x,y).setStatus(Dot.STATUS_ON);</span><br><span class="line">                i++;</span><br><span class="line"><span class="comment">//                System.out.println(&quot;Block&quot;+i);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View view, MotionEvent e)</span> </span>&#123;<span class="comment">//点击操作</span></span><br><span class="line">        <span class="keyword">if</span>(e.getAction()==MotionEvent.ACTION_UP)&#123;<span class="comment">//判断是否点击</span></span><br><span class="line"><span class="comment">//            Toast.makeText(getContext(),e.getX()+&quot;:&quot;+e.getY(),Toast.LENGTH_SHORT).show();</span></span><br><span class="line">            <span class="keyword">int</span> x,y;</span><br><span class="line">            y=(<span class="keyword">int</span>)(e.getY()/WIDTH);<span class="comment">//根据点击奇偶行分别处理</span></span><br><span class="line">            <span class="keyword">if</span>(y%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                x=(<span class="keyword">int</span>)(e.getX()/WIDTH);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                x=(<span class="keyword">int</span>)((e.getX()-WIDTH/<span class="number">2</span>)/WIDTH);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断点击是否再边界内</span></span><br><span class="line">            <span class="keyword">if</span>(x+<span class="number">1</span>&gt;COL||y+<span class="number">1</span>&gt;ROW)&#123;<span class="comment">//边界外则初始化</span></span><br><span class="line">                initGame();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(getDot(x,y).getStatus()==Dot.STATUS_OFF)&#123;<span class="comment">//判断是否为空点</span></span><br><span class="line">                getDot(x,y).setStatus(Dot.STATUS_ON);</span><br><span class="line">                move();</span><br><span class="line">            &#125;</span><br><span class="line">            redraw();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>KMP算法的理解分析及优化</title>
    <url>/2021/12/10/KMP%E7%AE%97%E6%B3%95%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E5%88%86%E6%9E%90%E5%8F%8A%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>　　kmp实际就是一种字符串查找算法，一般数据的时候我们可以直接暴力匹配但对于大数据是行不通的，接下来我以s为母串p为目标字符串。</p>
<p><img src="https://s2.loli.net/2021/12/10/CUawl31gIrvVbez.png" alt="图片.png"></p>
<p>　　如上图只有最后一位p[6]匹配失败按照传统暴力办法则要往后移动一位再继续匹配，就是这样</p>
<p><img src="https://s2.loli.net/2021/12/10/COzX82coZt9wr7G.png" alt="图片.png"></p>
<p>　　这样是十分浪费时间的因为在之前的匹配中我们已经知道s[5]=p[1]，而p[1]肯定不等于p[0]所以s[5]肯定不等于p[0]，而kmp就是利用之前已经</p>
<p>部分匹配这个有效信息，保持i 不回溯，通过修改j 的位置，让模式串尽量地移动到有效的位置。</p>
<p>　　KMP:</p>
<p>　　先说定义吧什么是KMP,</p>
<p>　　假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置</p>
<ul>
<li>如果j = -1，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++，继续匹配下一个字符；</li>
<li>如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]。此举意味着失配时，模式串P相对于文本串S向右移动了j - next [j] 位。</li>
<li>换言之，当匹配失败时，模式串向右移动的位数为：失配字符所在位置 - 失配字符对应的next 值，即**移动的实际位数为：j - next[j]**，且此值大于等于1。</li>
</ul>
<p>　　而next数组的含义就是比如next[j]表示的就是在长度为j-1的p目标字符串中最长的相同前缀和后缀长度。</p>
<p>　　也就是说在上图得情况中我们没必要这么一步一步往后推而是这样</p>
<p><img src="https://s2.loli.net/2021/12/10/5xpQYDPaC8MzXkS.png" alt="图片.png"></p>
<p>　　因为next数组的定义就是长度为j-1的目标字符串最大相同前缀后缀长度，所以往后移动j-next[j]就可以让其移动到一个效率跟高的位置，为什么呢，因为</p>
<p>在我们匹配的时候已经知道前j-1是已经匹配好的，那我们以前j-1字符串的前缀为基点移动到和他相同的最长后缀就可以了。</p>
<p>　　思路很好理解问题就是next数组该怎么求　</p>
<p>　　next数组：</p>
<p>　　next数组的定义就是next[j]表示的就是在长度为j-1的p目标字符串中最长的相同前缀和后缀长度，所以我们只需要找到每个位置最长前缀后缀，然后整体</p>
<p>右移一位赋初值为-1就可以了。这就是求next的思路，继续分析，假设我们已经知道了next[j]去求next[j+1]，假设next[j]就等于k，也就是在j-1的目标字符串中</p>
<p>前缀和后缀相同最长长度为k，那我们只需要去比较p[k]和p[j]就可以了，因为p0<del>pk-1是和pj-k</del>pj-1是相同的，如果pk==pj那么next[j+1]=next[j]+1=k+1,那假如不同呢？</p>
<p>　　不同的情况我们这样去理解：</p>
<p>　　先说结论就是去递归k=next[k]直到pk‘==pj然后next [j + 1] = k’ + 1 = next [k’ ] +  1，或者找不到就为0。那为什么是去递归k=next[k]呢，我们继续从next的定义出发，对于pj+1目标字符串来说他只是p[k]!=p[j]但是p0<del>pk-1是和pj-k</del>pj-1是相同的，从效率上讲我们只需要去找一个和p0<del>pk-1相同的前缀然后最后一位和pj相同就是我们要的值，而和p0</del>pk-1相同的前缀就是p0~p[next[k]]-1，不懂可以再看一下next数组的定义，所以我们只需要去比较p[next[k]]和p[j]是否相同就可以了相同就next [j + 1] = k’ + 1 = next [k’ ] + 1，不同就继续递归索引直到没有然后值就是0。</p>
<p><img src="https://s2.loli.net/2021/12/10/bQuvH3qDsrwdkOy.png" alt="图片.png"></p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">1000005</span>],b[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> next[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnext</span><span class="params">(<span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="keyword">int</span> l1,<span class="keyword">int</span> l2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%s %s&quot;</span>,&amp;a,&amp;b))&#123;</span><br><span class="line">        sum=<span class="built_in">kmp</span>(<span class="built_in">strlen</span>(a),<span class="built_in">strlen</span>(b));</span><br><span class="line">        <span class="keyword">if</span>(sum&gt;=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnext</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">-1</span>;</span><br><span class="line">    next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || b[i] == b[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">            next[i] = j;</span><br><span class="line">  </span><br><span class="line">        &#125;    </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j=next[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="keyword">int</span> l1,<span class="keyword">int</span> l2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">getnext</span>(l2);</span><br><span class="line">    <span class="keyword">while</span>(i&lt;l1&amp;&amp;j&lt;l2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span>||a[i]==b[j])&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j=next[j];    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;=l2)</span><br><span class="line">        <span class="keyword">return</span> i-l2;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　但其实这个代码还有一点点小问题，就是这种情况</p>
<p><img src="https://s2.loli.net/2021/12/10/B8cpyvWMYtEXDHV.png" alt="图片.png"></p>
<p><img src="https://s2.loli.net/2021/12/10/Bvl564Z7PgmT9SX.png" alt="图片.png"></p>
<p>　　按照我们kmp的作用来说不应该出现这种失匹的情况，为什么会发生呢，问题出在不该出现p[j] = p[ next[j] ]。为什么呢？理由是：当p[j] != s[i] 时，下次匹配必然是p[ next [j]]  跟s[i]匹配，如果p[j] = p[ next[j]  ]，必然导致后一步匹配失败（因为p[j]已经跟s[i]失配，然后你还用跟p[j]等同的值p[next[j]]去跟s[i]匹配，很显然，必然失配），所以**不能允许p[j] = p[ next[j ]]**。如果出现了p[j] = p[ next[j] ]咋办呢？如果出现了，则需要再次递归，即令next[j] = next[ next[j] ]。</p>
<p>　　所以优化一下的代码就是：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> a[<span class="number">1000005</span>],b[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> next[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnext</span><span class="params">(<span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="keyword">int</span> l1,<span class="keyword">int</span> l2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%s %s&quot;</span>,&amp;a,&amp;b))&#123;</span><br><span class="line">        sum=<span class="built_in">kmp</span>(<span class="built_in">strlen</span>(a),<span class="built_in">strlen</span>(b));</span><br><span class="line">        <span class="keyword">if</span>(sum&gt;=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnext</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">-1</span>;</span><br><span class="line">    next[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || b[i] == b[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">            <span class="keyword">if</span>(b[i]!=b[j])</span><br><span class="line">                next[i] = j;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                next[i]=next[j];    </span><br><span class="line">        &#125;    </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j=next[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="keyword">int</span> l1,<span class="keyword">int</span> l2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">getnext</span>(l2);</span><br><span class="line">    <span class="keyword">while</span>(i&lt;l1&amp;&amp;j&lt;l2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span>||a[i]==b[j])&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j=next[j];    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;=l2)</span><br><span class="line">        <span class="keyword">return</span> i-l2;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>linux</title>
    <url>/2022/02/02/Linux/</url>
    <content><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="常用文件管理命令"><a href="#常用文件管理命令" class="headerlink" title="常用文件管理命令"></a>常用文件管理命令</h2><p>(1) ctrl c: 取消命令，并且换行<br>(2) ctrl u: 清空本行命令<br>(3) tab键：可以补全命令和文件名，如果补全不了快速按两下tab键，可以显示备选选项<br>(4) ls: 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件<br>(5) pwd: 显示当前路径<br>(6) cd XXX: 进入XXX目录下, cd .. 返回上层目录<br>(7) cp XXX YYY: 将XXX文件复制成YYY，XXX和YYY可以是一个路径，比如../dir_c/a.txt，表示上层目录下的dir_c文件夹下的文件a.txt<br>(8) mkdir XXX: 创建目录XXX<br>(9) rm XXX: 删除普通文件;  rm XXX -r: 删除文件夹<br>(10) mv XXX YYY: 将XXX文件移动到YYY，和cp命令一样，XXX和YYY可以是一个路径；重命名也是用这个命令<br>(11) touch XXX: 创建一个文件<br>(12) cat XXX: 展示文件XXX中的内容<br>(13) 复制文本<br>    windows/Linux下：Ctrl + insert，Mac下：command + c<br>(14) 粘贴文本<br>    windows/Linux下：Shift + insert，Mac下：command + v</p>
<h2 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h2><p>功能：<br>    (1) 分屏。<br>    (2) 允许断开Terminal连接后，继续运行进程。<br>结构：<br>    一个tmux可以包含多个session，一个session可以包含多个window，一个window可以包含多个pane。<br>    实例：<br>        tmux:<br>            session 0:<br>                window 0:<br>                    pane 0<br>                    pane 1<br>                    pane 2<br>                    …<br>                window 1<br>                window 2<br>                …<br>            session 1<br>            session 2<br>            …<br>操作：<br>    (1) tmux：新建一个session，其中包含一个window，window中包含一个pane，pane里打开了一个shell对话框。<br>    (2) 按下Ctrl + a后手指松开，然后按%：将当前pane左右平分成两个pane。<br>    (3) 按下Ctrl + a后手指松开，然后按”（注意是双引号”）：将当前pane上下平分成两个pane。<br>    (4) Ctrl + d：关闭当前pane；如果当前window的所有pane均已关闭，则自动关闭window；如果当前session的所有window均已关闭，则自动关闭session。<br>    (5) 鼠标点击可以选pane。<br>    (6) 按下ctrl + a后手指松开，然后按方向键：选择相邻的pane。<br>    (7) 鼠标拖动pane之间的分割线，可以调整分割线的位置。<br>    (8) 按住ctrl + a的同时按方向键，可以调整pane之间分割线的位置。<br>    (9) 按下ctrl + a后手指松开，然后按z：将当前pane全屏/取消全屏。<br>    (10) 按下ctrl + a后手指松开，然后按d：挂起当前session。<br>    (11) tmux a：打开之前挂起的session。<br>    (12) 按下ctrl + a后手指松开，然后按s：选择其它session。<br>        方向键 —— 上：选择上一项 session/window/pane<br>        方向键 —— 下：选择下一项 session/window/pane<br>        方向键 —— 右：展开当前项 session/window<br>        方向键 —— 左：闭合当前项 session/window<br>    (13) 按下Ctrl + a后手指松开，然后按c：在当前session中创建一个新的window。<br>    (14) 按下Ctrl + a后手指松开，然后按w：选择其他window，操作方法与(12)完全相同。<br>    (15) 按下Ctrl + a后手指松开，然后按PageUp：翻阅当前pane内的内容。<br>    (16) 鼠标滚轮：翻阅当前pane内的内容。<br>    (17) 在tmux中选中文本时，需要按住shift键。（仅支持Windows和Linux，不支持Mac，不过该操作并不是必须的，因此影响不大）<br>    (18) tmux中复制/粘贴文本的通用方式：<br>        (1) 按下Ctrl + a后松开手指，然后按[<br>        (2) 用鼠标选中文本，被选中的文本会被自动复制到tmux的剪贴板<br>        (3) 按下Ctrl + a后松开手指，然后按]，会将剪贴板中的内容粘贴到光标处</p>
<h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p>功能：<br>    (1) 命令行模式下的文本编辑器。<br>    (2) 根据文件扩展名自动判别编程语言。支持代码缩进、代码高亮等功能。<br>    (3) 使用方式：vim filename<br>        如果已有该文件，则打开它。<br>        如果没有该文件，则打开个一个新的文件，并命名为filename<br>模式：<br>    (1) 一般命令模式<br>        默认模式。命令输入方式：类似于打游戏放技能，按不同字符，即可进行不同操作。可以复制、粘贴、删除文本等。<br>    (2) 编辑模式<br>        在一般命令模式里按下i，会进入编辑模式。<br>        按下ESC会退出编辑模式，返回到一般命令模式。<br>    (3) 命令行模式<br>        在一般命令模式里按下:/?三个字母中的任意一个，会进入命令行模式。命令行在最下面。<br>        可以查找、替换、保存、退出、配置编辑器等。<br>操作：<br>    (1) i：进入编辑模式<br>    (2) ESC：进入一般命令模式<br>    (3) h 或 左箭头键：光标向左移动一个字符<br>    (4) j 或 向下箭头：光标向下移动一个字符<br>    (5) k 或 向上箭头：光标向上移动一个字符<br>    (6) l 或 向右箭头：光标向右移动一个字符<br>    (7) n<Space>：n表示数字，按下数字后再按空格，光标会向右移动这一行的n个字符<br>    (8) 0 或 功能键[Home]：光标移动到本行开头<br>    (9) $ 或 功能键[End]：光标移动到本行末尾<br>    (10) G：光标移动到最后一行<br>    (11) :n 或 nG：n为数字，光标移动到第n行<br>    (12) gg：光标移动到第一行，相当于1G<br>    (13) n<Enter>：n为数字，光标向下移动n行<br>    (14) /word：向光标之下寻找第一个值为word的字符串。<br>    (15) ?word：向光标之上寻找第一个值为word的字符串。<br>    (16) n：重复前一个查找操作<br>    (17) N：反向重复前一个查找操作<br>    (18) :n1,n2s/word1/word2/g：n1与n2为数字，在第n1行与n2行之间寻找word1这个字符串，并将该字符串替换为word2<br>    (19) :1,$s/word1/word2/g：将全文的word1替换为word2<br>    (20) :1,$s/word1/word2/gc：将全文的word1替换为word2，且在替换前要求用户确认。<br>    (21) v：选中文本<br>    (22) d：删除选中的文本<br>    (23) dd: 删除当前行<br>    (24) y：复制选中的文本<br>    (25) yy: 复制当前行<br>    (26) p: 将复制的数据在光标的下一行/下一个位置粘贴<br>    (27) u：撤销<br>    (28) Ctrl + r：取消撤销<br>    (29) 大于号 &gt;：将选中的文本整体向右缩进一次<br>    (30) 小于号 &lt;：将选中的文本整体向左缩进一次<br>    (31) :w 保存<br>    (32) :w! 强制保存<br>    (33) :q 退出<br>    (34) :q! 强制退出<br>    (35) :wq 保存并退出<br>    (36) :set paste 设置成粘贴模式，取消代码自动缩进<br>    (37) :set nopaste 取消粘贴模式，开启代码自动缩进<br>    (38) :set nu 显示行号<br>    (39) :set nonu 隐藏行号<br>    (40) gg=G：将全文代码格式化<br>    (41) :noh 关闭查找关键词高亮<br>    (42) Ctrl + q：当vim卡死时，可以取消当前正在执行的命令<br>异常处理：<br>    每次用vim编辑文件时，会自动创建一个.filename.swp的临时文件。<br>    如果打开某个文件时，该文件的swp文件已存在，则会报错。此时解决办法有两种：<br>        (1) 找到正在打开该文件的程序，并退出<br>        (2) 直接删掉该swp文件即可</p>
]]></content>
  </entry>
  <entry>
    <title>MFC实现直线算法</title>
    <url>/2022/03/03/MFC%E5%AE%9E%E7%8E%B0%E7%9B%B4%E7%BA%BF%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="MFC实现直线算法"><a href="#MFC实现直线算法" class="headerlink" title="MFC实现直线算法"></a>MFC实现直线算法</h1><p><a href="https://www.bilibili.com/video/BV1PU4y1f7Gs?share_source=copy_web">视频教学地址</a></p>
<h2 id="DDA"><a href="#DDA" class="headerlink" title="DDA"></a>DDA</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CTest1View::OnDda</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> 在此添加命令处理程序代码</span></span><br><span class="line">	<span class="keyword">int</span> x0=<span class="number">0</span>, y0=<span class="number">0</span>, x1=<span class="number">300</span>, y1=<span class="number">400</span>, color = <span class="number">255</span>;</span><br><span class="line">	<span class="keyword">int</span> dx, dy, cou, k;</span><br><span class="line">	<span class="function">CClientDC <span class="title">cc</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">	<span class="keyword">double</span> x, y,increase_x,increase_y;</span><br><span class="line">	dx = <span class="built_in">abs</span>(x0 - x1);</span><br><span class="line">	dy = <span class="built_in">abs</span>(y0 - y1);</span><br><span class="line">	x = x0, y = y0;</span><br><span class="line">	cou = <span class="built_in">max</span>(dx, dy);</span><br><span class="line">	increase_x = (<span class="keyword">double</span>)dx / (<span class="keyword">double</span>)cou;</span><br><span class="line">	increase_y = (<span class="keyword">double</span>)dy / (<span class="keyword">double</span>)cou;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cou;i++) &#123;</span><br><span class="line">		cc.<span class="built_in">SetPixel</span>((<span class="keyword">int</span>)(x+<span class="number">0.5</span>),(<span class="keyword">int</span>)(y+<span class="number">0.5</span>),color);</span><br><span class="line">		x += increase_x;</span><br><span class="line">		y += increase_y;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Bresenham"><a href="#Bresenham" class="headerlink" title="Bresenham"></a>Bresenham</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CTest1View::Onbresenham</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> 在此添加命令处理程序代码</span></span><br><span class="line">	<span class="keyword">int</span> x0 = <span class="number">0</span>, y0 = <span class="number">0</span>, x1 = <span class="number">300</span>, y1 = <span class="number">600</span>, color = <span class="number">159</span>;</span><br><span class="line">	<span class="keyword">int</span> dx, dy, cou, k,f;</span><br><span class="line">	<span class="function">CClientDC <span class="title">cc</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">	<span class="keyword">int</span> x, y, increase0, increase1;</span><br><span class="line">	dx = <span class="built_in">abs</span>(x0 - x1);</span><br><span class="line">	dy = <span class="built_in">abs</span>(y0 - y1);</span><br><span class="line">	f = <span class="number">2</span> * dy - dx;</span><br><span class="line">	x = x0, y = y0;</span><br><span class="line">	cou = <span class="built_in">max</span>(dx, dy);</span><br><span class="line">	increase0 = <span class="number">2</span> * (dy - dx);</span><br><span class="line">	increase1 = <span class="number">2</span> * dy;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= cou; i++) &#123;</span><br><span class="line">		cc.<span class="built_in">SetPixel</span>(x, y, color);</span><br><span class="line">		<span class="keyword">if</span> (f &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			f += increase1;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			y++;</span><br><span class="line">			f += increase0;</span><br><span class="line">		&#125;</span><br><span class="line">		x++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>git</title>
    <url>/2022/02/25/git/</url>
    <content><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="git基本概念"><a href="#git基本概念" class="headerlink" title="git基本概念"></a>git基本概念</h2><ul>
<li>工作区：仓库的目录。工作区是独立于各个分支的。</li>
<li>暂存区：数据暂时存放的区域，类似于工作区写入版本库前的缓存区。暂存区是独立于各个分支的。</li>
<li>版本库：存放所有已经提交到本地仓库的代码版本</li>
<li>版本结构：树结构，树中每个节点代表一个代码版本。</li>
</ul>
<h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">git config --global user.name xxx：设置全局用户名，信息记录在~/.gitconfig文件中</span><br><span class="line">git config --global user.email xxx@xxx.com：设置全局邮箱地址，信息记录在~/.gitconfig文件中</span><br><span class="line">git init：将当前目录配置成git仓库，信息记录在隐藏的.git文件夹中</span><br><span class="line">git add XX：将XX文件添加到暂存区</span><br><span class="line">git add .：将所有待加入暂存区的文件加入暂存区</span><br><span class="line">git rm --cached XX：将文件从仓库索引目录中删掉</span><br><span class="line">git commit -m <span class="string">&quot;给自己看的备注信息&quot;</span>：将暂存区的内容提交到当前分支</span><br><span class="line">git status：查看仓库状态</span><br><span class="line">git diff XX：查看XX文件相对于暂存区修改了哪些内容</span><br><span class="line">git <span class="built_in">log</span>：查看当前分支的所有版本</span><br><span class="line">git reflog：查看HEAD指针的移动历史（包括被回滚的版本）</span><br><span class="line">git reset --hard HEAD^ 或 git reset --hard HEAD~：将代码库回滚到上一个版本</span><br><span class="line">git reset --hard HEAD^^：往上回滚两次，以此类推</span><br><span class="line">git reset --hard HEAD~<span class="number">100</span>：往上回滚<span class="number">100</span>个版本</span><br><span class="line">git reset --hard 版本号：回滚到某一特定版本</span><br><span class="line">git checkout — XX或git restore XX：将XX文件尚未加入暂存区的修改全部撤销</span><br><span class="line">git remote add origin git@git.acwing.com:xxx/XXX.git：将本地仓库关联到远程仓库</span><br><span class="line">git push -u (第一次需要-u以后不需要)：将当前分支推送到远程仓库</span><br><span class="line">git push origin branch_name：将本地的某个分支推送到远程仓库</span><br><span class="line">git clone git@git.acwing.com:xxx/XXX.git：将远程仓库XXX下载到当前目录下</span><br><span class="line">git checkout -b branch_name：创建并切换到branch_name这个分支</span><br><span class="line">git branch：查看所有分支和当前所处分支</span><br><span class="line">git checkout branch_name：切换到branch_name这个分支</span><br><span class="line">git merge branch_name：将分支branch_name合并到当前分支上</span><br><span class="line">git branch -d branch_name：删除本地仓库的branch_name分支</span><br><span class="line">git branch branch_name：创建新分支</span><br><span class="line">git push --<span class="built_in">set</span>-upstream origin branch_name：设置本地的branch_name分支对应远程仓库的branch_name分支</span><br><span class="line">git push -d origin branch_name：删除远程仓库的branch_name分支</span><br><span class="line">git pull：将远程仓库的当前分支与本地仓库的当前分支合并</span><br><span class="line">git pull origin branch_name：将远程仓库的branch_name分支与本地仓库的当前分支合并</span><br><span class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/branch_name1 branch_name2：将远程的branch_name1分支与本地的branch_name2分支对应</span><br><span class="line">git checkout -t origin/branch_name 将远程的branch_name分支拉取到本地</span><br><span class="line">git stash：将工作区和暂存区中尚未提交的修改存入栈中</span><br><span class="line">git stash apply：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素</span><br><span class="line">git stash drop：删除栈顶存储的修改</span><br><span class="line">git stash pop：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素</span><br><span class="line">git stash <span class="built_in">list</span>：查看栈中所有元素</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>opencv 学习笔记</title>
    <url>/2022/01/05/opencv%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="opencv-学习笔记"><a href="#opencv-学习笔记" class="headerlink" title="opencv 学习笔记"></a>opencv 学习笔记</h1><h3 id="处理图像"><a href="#处理图像" class="headerlink" title="处理图像"></a>处理图像</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">作者：Mibbp</span></span><br><span class="line"><span class="string">日期: 2022年01月04日</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cv_show</span> (<span class="params">name,img</span>):</span></span><br><span class="line">    cv.imshow(name,img)     <span class="comment">#显示图像</span></span><br><span class="line">    cv.waitKey(<span class="number">0</span>)           <span class="comment"># 等待时间，毫秒级，0表示任意键终止</span></span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line"></span><br><span class="line">img = cv.imread(<span class="string">&#x27;01.jpg&#x27;</span>)   <span class="comment">#读取照片</span></span><br><span class="line"><span class="comment"># cv_show(&#x27;01&#x27;,img)</span></span><br><span class="line"><span class="comment"># print(img.shape)    #图像三个参数，前两个参数是宽度和高度，第三个是颜色通道数量</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># img1=img[0:50,0:200]    #截取照片</span></span><br><span class="line"><span class="comment"># cv_show(&#x27;02&#x27;,img1)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># b,g,r=cv.split(img)     #颜色通道提取，opencv是B-G-R</span></span><br><span class="line"><span class="comment"># print(b.shape)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># img=cv.merge((b,g,r))     #合并通道</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 提取R通道 [:,:]长宽不设参数的话表示整张图片</span></span><br><span class="line"><span class="comment"># img2 = img.copy()</span></span><br><span class="line"><span class="comment"># img2[:,:,0]=0</span></span><br><span class="line"><span class="comment"># img2[:,:,1]=0</span></span><br><span class="line"><span class="comment"># cv_show(&#x27;R&#x27;,img2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 边界填充</span></span><br><span class="line">top_size,bottom_size,left_size,right_size=(<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>)     <span class="comment">#上下左右边界的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制法 复制最边缘元素</span></span><br><span class="line">replicate =cv.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv.BORDER_REPLICATE)</span><br><span class="line">cv_show(<span class="string">&#x27;rep&#x27;</span>,replicate)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反射法 中间为原图像，左右为填充 fedcba|abcdefgh|hgfedcb</span></span><br><span class="line">reflect =cv.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv.BORDER_REFLECT)</span><br><span class="line">cv_show(<span class="string">&#x27;ref&#x27;</span>,reflect)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反射法 以最边缘为轴，中间为原图像，左右为填充 fedcb|abcdefgh|gfedcb</span></span><br><span class="line">reflect101 =cv.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv.BORDER_REFLECT_101)</span><br><span class="line">cv_show(<span class="string">&#x27;ref101&#x27;</span>,reflect101)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 外包装法 gfedcb|abcdefgh|gfedcb</span></span><br><span class="line">wrap =cv.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv.BORDER_WRAP)</span><br><span class="line">cv_show(<span class="string">&#x27;wrap&#x27;</span>,wrap)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常数法 直接填充指定的</span></span><br><span class="line">con =cv.copyMakeBorder(img,top_size,bottom_size,left_size,right_size,cv.BORDER_CONSTANT,<span class="number">10</span>)</span><br><span class="line">cv_show(<span class="string">&#x27;con&#x27;</span>,con)</span><br></pre></td></tr></table></figure>

<h3 id="处理视频"><a href="#处理视频" class="headerlink" title="处理视频"></a>处理视频</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">作者：Mibbp</span></span><br><span class="line"><span class="string">日期: 2022年01月04日</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">vc =cv.VideoCapture(<span class="string">&#x27;02.mp4&#x27;</span>)   <span class="comment">#读取视频</span></span><br><span class="line"><span class="comment"># 判断是否读取视频</span></span><br><span class="line"><span class="keyword">if</span> vc.isOpened():</span><br><span class="line">    <span class="built_in">open</span>,frame = vc.read()  <span class="comment">#读取一帧画面</span></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">open</span>=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把视频每一帧读取出来</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">open</span>:</span><br><span class="line">    ret, frame =vc.read()</span><br><span class="line">    gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)    <span class="comment">#将这一帧转换为灰色</span></span><br><span class="line">    cv.imshow(<span class="string">&#x27;result&#x27;</span>,gray)                        <span class="comment">#显示这一帧</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cv.waitKey(<span class="number">33</span>) &amp; <span class="number">0xFF</span> ==<span class="number">27</span>:                  <span class="comment">#等待时间，如果按倒关闭键则退出</span></span><br><span class="line">        <span class="built_in">open</span>=<span class="literal">False</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放并且销毁所有窗口</span></span><br><span class="line">vc.release()</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<h3 id="图像融合"><a href="#图像融合" class="headerlink" title="图像融合"></a>图像融合</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">作者：Mibbp</span></span><br><span class="line"><span class="string">日期: 2022年01月04日</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cv_show</span>(<span class="params">name,img</span>):</span></span><br><span class="line">    cv.imshow(name,img)</span><br><span class="line">    cv.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv.destroyAllWindows()</span><br><span class="line"><span class="comment"># 图像融合 shape值必须一样</span></span><br><span class="line">img1 = cv.imread(<span class="string">&#x27;03.jpg&#x27;</span>)</span><br><span class="line">img2 = cv.imread(<span class="string">&#x27;01.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">img2 = cv.resize(img2,(<span class="number">942</span>,<span class="number">785</span>))    <span class="comment">#转换shape值</span></span><br><span class="line">res = cv.addWeighted(img1, <span class="number">0.4</span>, img2, <span class="number">0.6</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">cv_show(<span class="string">&#x27;4&#x27;</span>,res)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>shell</title>
    <url>/2022/02/25/shell/</url>
    <content><![CDATA[<h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><h3 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h3><p>shell是我们通过命令行与操作系统沟通的语言。</p>
<p>shell脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用。<br>AC Terminal中的命令行可以看成是一个<strong>“shell脚本在逐行执行”</strong>。</p>
<p>Linux中常见的shell脚本有很多种，常见的有：</p>
<ul>
<li>Bourne Shell(/usr/bin/sh或/bin/sh)</li>
<li>Bourne Again Shell(/bin/bash)</li>
<li>C Shell(/usr/bin/csh)</li>
<li>K Shell(/usr/bin/ksh)</li>
<li>zsh</li>
</ul>
<p>Linux系统中一般默认使用bash，所以接下来讲解bash中的语法。<br>文件开头需要写**#! /bin/bash**，指明bash为脚本解释器。</p>
<h3 id="示列"><a href="#示列" class="headerlink" title="示列"></a>示列</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line">echo &quot;Hello World!&quot;</span><br></pre></td></tr></table></figure>

<h3 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h3><ul>
<li><p>作为可执行文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ chmod +x test.sh  # 使脚本具有可执行权限</span><br><span class="line">acs@9e0ebfcd82d7:~$ ./test.sh  # 当前路径下执行</span><br><span class="line">Hello World!  # 脚本输出</span><br><span class="line">acs@9e0ebfcd82d7:~$ /home/acs/test.sh  # 绝对路径下执行</span><br><span class="line">Hello World!  # 脚本输出</span><br><span class="line">acs@9e0ebfcd82d7:~$ ~/test.sh  # 家目录路径下执行</span><br><span class="line">Hello World!  # 脚本输出</span><br></pre></td></tr></table></figure></li>
<li><p>用解释器执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ bash test.sh</span><br><span class="line">Hello World!  # 脚本输出</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>每行中**#**之后的内容均是注释。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这是一行注释</span></span><br><span class="line"></span><br><span class="line">echo &#x27;Hello World&#x27;  #  这也是注释</span><br></pre></td></tr></table></figure>



<h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;EOF</span><br><span class="line">第一行注释</span><br><span class="line">第二行注释</span><br><span class="line">第三行注释</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>



<p>其中<strong>EOF</strong>可以换成其它任意字符串。例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:&lt;&lt;abc</span><br><span class="line">第一行注释</span><br><span class="line">第二行注释</span><br><span class="line">第三行注释</span><br><span class="line">abc</span><br><span class="line"></span><br><span class="line">:&lt;&lt;!</span><br><span class="line">第一行注释</span><br><span class="line">第二行注释</span><br><span class="line">第三行注释</span><br><span class="line">!</span><br></pre></td></tr></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p>定义变量，不需要加$符号，例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">name1=&#x27;mibbp&#x27;  # 单引号定义字符串</span><br><span class="line">name2=&quot;mibpp&quot;  # 双引号定义字符串</span><br><span class="line">name3=mibpp    # 也可以不加引号，同样表示字符串</span><br></pre></td></tr></table></figure>

<h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><p>使用变量，需要加上***$<em><strong>符号，或者</strong></em>${}***符号。花括号是可选的，主要为了帮助解释器识别变量边界。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">name=mibbp</span><br><span class="line">echo $name  # 输出mibbp</span><br><span class="line">echo $&#123;name&#125;  # 输出mibbp</span><br><span class="line">echo $&#123;name&#125;lrt  # 输出mibbplrt</span><br></pre></td></tr></table></figure>



<h3 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h3><p>使用<em><strong>readonly</strong></em>或者<em><strong>declare</strong></em>可以将变量变为只读。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">name=mibbp</span><br><span class="line">readonly name</span><br><span class="line">declare -r name  # 两种写法均可</span><br><span class="line"></span><br><span class="line">name=abc  # 会报错，因为此时name只读</span><br></pre></td></tr></table></figure>

<h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3><p><em><strong>unset</strong></em>可以删除变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">name=mibbp</span><br><span class="line">unset name</span><br><span class="line">echo $name  # 输出空行</span><br></pre></td></tr></table></figure>

<h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><ul>
<li>自定义变量（局部变量）<br>子进程不能访问的变量</li>
<li>环境变量（全局变量）<br>子进程可以访问的变量</li>
</ul>
<p>自定义变量改成环境变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ name=mibbp  # 定义变量</span><br><span class="line">acs@9e0ebfcd82d7:~$ export name  # 第一种方法</span><br><span class="line">acs@9e0ebfcd82d7:~$ declare -x name  # 第二种方法</span><br></pre></td></tr></table></figure>

<p>环境变量改为自定义变量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ export name=mibbp  # 定义环境变量</span><br><span class="line">acs@9e0ebfcd82d7:~$ declare +x name  # 改为自定义变量</span><br></pre></td></tr></table></figure>

<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串可以用单引号，也可以用双引号，也可以不用引号。</p>
<p>单引号与双引号的区别：</p>
<ul>
<li>单引号中的内容会原样输出，不会执行、不会取变量；</li>
<li>双引号中的内容可以执行、可以取变量；</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=mibbp  # 不用引号</span><br><span class="line">echo &#x27;hello, $name \&quot;hh\&quot;&#x27;  # 单引号字符串，输出 hello, $name \&quot;hh\&quot;</span><br><span class="line">echo &quot;hello, $name \&quot;hh\&quot;&quot;  # 双引号字符串，输出 hello, mibbp &quot;hh&quot;</span><br></pre></td></tr></table></figure>

<p>获取字符串长度</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">name=&quot;mibbp&quot;</span><br><span class="line">echo $&#123;#name&#125;  # 输出3</span><br></pre></td></tr></table></figure>

<p>提取字串</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">name=&quot;hello, mibbp&quot;</span><br><span class="line">echo $&#123;name:0:5&#125;  # 提取从0开始的5个字符</span><br></pre></td></tr></table></figure>

<h2 id="默认变量"><a href="#默认变量" class="headerlink" title="默认变量"></a>默认变量</h2><h3 id="文件参数变量"><a href="#文件参数变量" class="headerlink" title="文件参数变量"></a>文件参数变量</h3><p>在执行shell脚本时，可以向脚本传递参数。**$1<strong>是第一个参数，</strong>$2<strong>是第二个参数，以此类推。特殊的，</strong>$0**是文件名（包含路径）。例如：</p>
<p>创建文件<strong>test.sh</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;文件名：&quot;$0</span><br><span class="line">echo &quot;第一个参数：&quot;$1</span><br><span class="line">echo &quot;第二个参数：&quot;$2</span><br><span class="line">echo &quot;第三个参数：&quot;$3</span><br><span class="line">echo &quot;第四个参数：&quot;$4</span><br></pre></td></tr></table></figure>

<p>执行该脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ chmod +x test.sh </span><br><span class="line">acs@9e0ebfcd82d7:~$ ./test.sh 1 2 3 4</span><br><span class="line">文件名：./test.sh</span><br><span class="line">第一个参数：1</span><br><span class="line">第二个参数：2</span><br><span class="line">第三个参数：3</span><br><span class="line">第四个参数：4</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>ssh</title>
    <url>/2022/02/25/ssh/</url>
    <content><![CDATA[<h1 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h1><h2 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>远程登陆服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh user@hostname</span><br></pre></td></tr></table></figure>

<ul>
<li><p>user : 用户名</p>
</li>
<li><p>hostname : IP地址或域名</p>
</li>
</ul>
<p>第一次登陆时会提示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The authenticity of host &#x27;123.57.47.211 (123.57.47.211)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:iy237yysfCe013/l+kpDGfEG9xxHxm0dnxnAbJTPpG8.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])?</span><br></pre></td></tr></table></figure>

<p>输入<code>yes</code>，然后回车即可。<br>这样会将该服务器的信息记录在 <code>~/.ssh/known_hosts</code> 文件中。</p>
<p>然后输入密码即可登录到远程服务器中。</p>
<p>默认登录端口号为22。如果想登录某一特定端口：</p>
<p><code>ssh user@hostname -p 22</code></p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>创建文件 <code> ~/.ssh/config</code></p>
<p>然后在文件中输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Host myserver1</span><br><span class="line">    HostName IP地址或域名</span><br><span class="line">    User 用户名</span><br><span class="line"></span><br><span class="line">Host myserver2</span><br><span class="line">    HostName IP地址或域名</span><br><span class="line">    User 用户名</span><br></pre></td></tr></table></figure>

<p>之后再使用服务器时，可以直接使用别名<code>myserver1</code>、<code>myserver2</code>。</p>
<h3 id="密钥登录"><a href="#密钥登录" class="headerlink" title="密钥登录"></a>密钥登录</h3><p>创建密钥：</p>
<p><code> ssh-keygen</code><br>然后一直回车即可。</p>
<p>执行结束后，<code>~/.ssh/</code>目录下会多两个文件：</p>
<ul>
<li><code>id_rsa</code>：私钥</li>
<li><code>id_rsa.pub</code>：公钥<br>之后想免密码登录哪个服务器，就将公钥传给哪个服务器即可。</li>
</ul>
<p>例如，想免密登录<code>myserver</code>服务器。则将公钥中的内容，复制到<code>myserver</code>中的<code>~/.ssh/authorized_keys</code>文件里即可。</p>
<p>也可以使用如下命令一键添加公钥：</p>
<p><code>ssh-copy-id myserver</code></p>
<h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><p>命令格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh user@hostname command</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh user@hostname ls -a</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">单引号中的$i可以求值</span><br><span class="line"></span><br><span class="line">ssh myserver &#x27;for ((i = 0; i &lt; 10; i ++ )) do echo $i; done&#x27;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">双引号中的$i不可以求值</span><br><span class="line"></span><br><span class="line">ssh myserver &quot;for ((i = 0; i &lt; 10; i ++ )) do echo $i; done&quot;</span><br></pre></td></tr></table></figure>

<h2 id="scp传文件"><a href="#scp传文件" class="headerlink" title="scp传文件"></a>scp传文件</h2><h3 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h3><p>命令格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp source destination</span><br></pre></td></tr></table></figure>

<p>将<code>source</code>路径下的文件复制到<code>destination</code>中</p>
<p>一次复制多个文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp source1 source2 destination</span><br></pre></td></tr></table></figure>

<p>复制文件夹：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r ~/tmp myserver:/home/acs/</span><br></pre></td></tr></table></figure>

<p>将本地家目录中的<code>tmp</code>文件夹复制到<code>myserver</code>服务器中的<code>/home/acs/</code>目录下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r ~/tmp myserver:homework/</span><br></pre></td></tr></table></figure>

<p>将本地家目录中的<code>tmp</code>文件夹复制到<code>myserver</code>服务器中的<code>~/homework/</code>目录下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r myserver:homework .</span><br></pre></td></tr></table></figure>

<p>将<code>myserver</code>服务器中的<code>~/homework/</code>文件夹复制到本地的当前路径下。</p>
<p>指定服务器的端口号：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -P 22 source1 source2 destination</span><br></pre></td></tr></table></figure>

<p>注意： <code>scp</code>的<code>-r -P</code>等参数尽量加在<code>source</code>和<code>destination</code>之前。</p>
<h3 id="使用scp配置其他服务器的vim和tmux"><a href="#使用scp配置其他服务器的vim和tmux" class="headerlink" title="使用scp配置其他服务器的vim和tmux"></a>使用<code>scp</code>配置其他服务器的<code>vim</code>和<code>tmux</code></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp ~/.vimrc ~/.tmux.conf myserver:</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>《男人八题》之—多重背包的单调队列优化与二进制优化</title>
    <url>/2021/12/10/%E3%80%8A%E7%94%B7%E4%BA%BA%E5%85%AB%E9%A2%98%E3%80%8B%E4%B9%8B%E2%80%94%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85%E7%9A%84%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>　　多重背包就是背包问题加了个次数每个物品可以选s次，很容易想到的代码就是在状态转换中再加一个循环从0到s，但这样大数据会超时，所以有了很多</p>
<p>优化方案。</p>
<p>　　二进制优化：</p>
<p>　　每个物品可以选的次数都是不同的，有一种想法是把这可以选s次的物品拆成s个物品，这样就只涉及选与不选，就简化成了01背包问题但还是会超时，因</p>
<p>为拆成了s个但其实没必要我们只需要拆成log2(n)个就可以了，转换成二进制，举个例子，比如说7，7的二进制是111，111以内的数都可以用100,10,1来表示，也就是十进制的1，2，4，但7是特殊情况或者比如说10，同样拆成1、2、4。1、2、4，可以表示7以内的数而我想表示10以内的书就只需要再加个3就可以了，dddd。</p>
<p>　　然后这样代码复杂度就不是O(n<em>v</em>s)而是O(n<em>v</em>log2(s))。</p>
<p>　　代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2010</span>;</span><br><span class="line"><span class="keyword">int</span> f[N],n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">good</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> w,v;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    vector&lt;good&gt; Good;</span><br><span class="line">    good tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v,w,s;</span><br><span class="line">        cin&gt;&gt;v&gt;&gt;w&gt;&gt;s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span> ; k &lt;= s ; k*=<span class="number">2</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            s-=k;</span><br><span class="line">            Good.<span class="built_in">push_back</span>(&#123;k*w,k*v&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s&gt;<span class="number">0</span>) Good.<span class="built_in">push_back</span>(&#123;s*w,s*v&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t : Good)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = m ; j &gt;= t.v ; j--)</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j] , f[j-t.v]+t.w );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;f[m]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　单调队列优化：</p>
<p>　　这个巨难我看大佬解析看懂的，原解析在这</p>
<p>　　作者：lys<br>　　链接：<a href="https://www.acwing.com/solution/content/6500/">https://www.acwing.com/solution/content/6500/</a><br>　　来源：AcWing</p>
<p>　　首先先从完全背包的思路出发dp[i][j] 表示将前 i 种物品放入容量为 j 的背包中所得到的最大价值dp[i][j] = max(不放入物品 i，放入1个物品 i，放入2个物品 i, … , 放入k个物品  i)，这里 k 要满足：k &lt;= s, j - k<em>v &gt;= 0，不放物品 i = dp[i-1][j]，放k个物品 i =  dp[i-1][j - k</em>v] + k<em>w，dp[i][j] = max(dp[i-1][j], dp[i-1][j-v] + w,  dp[i-1][j-2</em>v] + 2<em>w,…, dp[i-1][j-k</em>v] + k*w)。</p>
<p>　　然后我们优化成了一维，适当的调整循环条件，我们可以重复利用dp数组来保存上一轮的信息，我们令 dp[j] 表示容量为j的情况下，获得的最大价值，那么，针对每一类物品 i ，我们都更新一下 dp[m] –&gt; dp[0] 的值，最后 dp[m] 就是一个答案。<br>　　dp[m] = max(dp[m], dp[m-v] + w, dp[m-2<em>v] + 2</em>w, dp[m-3<em>v] + 3</em>w, …)<br>　　接下来，我们把 dp[0] –&gt; dp[m] 写成下面这种形式<br>　　dp[0], dp[v],  dp[2<em>v],  dp[3</em>v],  … , dp[k<em>v]<br>　　dp[1], dp[v+1], dp[2</em>v+1], dp[3<em>v+1], … , dp[k</em>v+1]<br>　　dp[2], dp[v+2], dp[2<em>v+2], dp[3</em>v+2], … , dp[k<em>v+2]<br>　　…<br>　　dp[j], dp[v+j], dp[2</em>v+j], dp[3<em>v+j], … , dp[k</em>v+j]</p>
<p>　　因为k<em>v+j一定可以等于m，所以很容易想到可以把这些分为j个类，每一类中的值，都是在同类之间转换得到的，也就是说，dp[k</em>v+j] 只依赖于 { dp[j], dp[v+j], dp[2<em>v+j], dp[3</em>v+j], … , dp[k<em>v+j]  }，因为我们需要的是{ dp[j], dp[v+j], dp[2</em>v+j], dp[3<em>v+j], … , dp[k</em>v+j] }  中的最大值，可以通过维护一个单调队列来得到结果。这样的话，问题就变成了 j 个单调队列的问题。所以，我们可以得到：<br>　　dp[j]  =   dp[j]<br>　　dp[j+v] = max(dp[j] + w, dp[j+v])<br>　　dp[j+2v] = max(dp[j] + 2w, dp[j+v] + w, dp[j+2v])<br>　　dp[j+3v] = max(dp[j] + 3w, dp[j+v] + 2w, dp[j+2v] + w, dp[j+3v])<br>　　…<br>　　但是，这个队列中前面的数，每次都会增加一个 w ，所以我们需要做一些转换<br>　　dp[j]  =   dp[j]<br>　　dp[j+v] = max(dp[j], dp[j+v] - w) + w<br>　　dp[j+2v] = max(dp[j], dp[j+v] - w, dp[j+2v] - 2w) + 2w<br>　　dp[j+3v] = max(dp[j], dp[j+v] - w, dp[j+2v] - 2w, dp[j+3v] - 3w) + 3w<br>　　…<br>　　这样，每次入队的值是 dp[j+k<em>v] - k</em>w</p>
<p>　　key:</p>
<p>　　维护队列元素的个数，如果不能继续入队，弹出队头元素<br>　　维护队列的单调性，即：尾值 &gt;= dp[j + k<em>v] - k</em>w</p>
<p>　　代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[N], pre[N], q[N];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(pre, dp, <span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line">        <span class="keyword">int</span> v, w, s;</span><br><span class="line">        cin &gt;&gt; v &gt;&gt; w &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> head = <span class="number">0</span>, tail = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt;= m; k += v) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (head &lt;= tail &amp;&amp; k - s*v &gt; q[head])</span><br><span class="line">                    ++head;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (head &lt;= tail &amp;&amp; pre[q[tail]] - (q[tail] - j)/v * w &lt;= pre[k] - (k - j)/v * w)</span><br><span class="line">                    --tail;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (head &lt;= tail)</span><br><span class="line">                    dp[k] = <span class="built_in">max</span>(dp[k], pre[q[head]] + (k - q[head])/v * w);</span><br><span class="line"></span><br><span class="line">                q[++tail] = k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>动态优先轮转调度算法</title>
    <url>/2021/12/15/%E5%8A%A8%E6%80%81%E4%BC%98%E5%85%88%E8%BD%AE%E8%BD%AC%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="实验目的："><a href="#实验目的：" class="headerlink" title="实验目的："></a><strong>实验目的：</strong></h2><ol>
<li><p>用C++编写一个进程调度算法模拟程序。</p>
</li>
<li><p>对现有进程调度算法进行理解，并对其进行优化。</p>
</li>
</ol>
<h2 id="实验要求："><a href="#实验要求：" class="headerlink" title="实验要求："></a><strong>实验要求：</strong></h2><ol>
<li><p>通过动态优先权轮转调度算法的学习，理解和掌握动态优先权以及轮转调度算法的思想、 设计与实现方法。</p>
</li>
<li><p>实现高优先权优先调度或轮转调度算法的数据结构设计、算法流程设计、模拟实现 </p>
</li>
</ol>
<p>与验证。</p>
<h2 id="算法设计注意点"><a href="#算法设计注意点" class="headerlink" title="算法设计注意点:"></a>算法设计注意点:</h2><p>在资源一定的情况下，调度算法需要在吞吐量，平均响应时间，公平性，调度引起的额外开销以及权重等方面做权衡，接下来对算法性能适用场所的讨论都是基于此的，因此对于不同的场景有不同适用的算法。</p>
<h2 id="调度算法："><a href="#调度算法：" class="headerlink" title="调度算法："></a>调度算法：</h2><ol>
<li>先进先出算法：</li>
</ol>
<p>顾名思义也就是满足先进先出（First-In-First-Out,FIFO）规则的进程调度算法，每次从就绪队列选择最先进入队列的进程，然后一直运行，直到进程退出或被阻塞，才会继续从队列中选择第一个进程接着运行。并且不会设计抢占，看上去似乎很公平，这似乎很公平，但是当一个长作业先运行了，那么后面的短作业等待的时间就会很长，不利于短作业，平均响应时间也会很长。</p>
<h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>· 公平性：满足先来后到的顺序且是非抢占式的也就是不会插队。</p>
<p>· 最少任务切换开销：因为先来的先完成所以不会涉及任务执行过程中发生切换也就不会有切换开销开销为0.</p>
<p>· 最大的吞吐量：没有任务切换开销，在其他一定的情况下，吞吐量肯定最大。</p>
<h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><p>· 平均响应时间高：假如队头是一个1000ms的任务，队列其他的均为10ms左右的任务，但是因为队头保证先完成在进行剩下的，那么后面的任务都要等待起码1000ms才能进行，这就导致了平均响应时间的增大。</p>
<h3 id="适用场景：队列中任务耗时差不多"><a href="#适用场景：队列中任务耗时差不多" class="headerlink" title="适用场景：队列中任务耗时差不多"></a>适用场景：队列中任务耗时差不多</h3><ol start="2">
<li>最短耗时任务优先算法：</li>
</ol>
<p>最短作业优先（<strong>Shortest Job First, SJF</strong>）调度算法同样也是顾名思义，它会优先选择运行时间最短的进程来运行，这有助于提高系统的吞吐量。但这个是抢占式的，也就是如果这时候新增了一个耗时比现在进行的任务剩余耗时短的，那么就会执行这个新的所需耗时短的任务，也就会导致耗时长的任务长时间不会被调用。</p>
<h3 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h3><h3 id="平均响应时间低：因为保证进行的是所需耗时最短的任务那么平均耗时一定最短。"><a href="#平均响应时间低：因为保证进行的是所需耗时最短的任务那么平均耗时一定最短。" class="headerlink" title="平均响应时间低：因为保证进行的是所需耗时最短的任务那么平均耗时一定最短。"></a>平均响应时间低：因为保证进行的是所需耗时最短的任务那么平均耗时一定最短。</h3><h3 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h3><h3 id="不公平：他凭什么后来居上！"><a href="#不公平：他凭什么后来居上！" class="headerlink" title="不公平：他凭什么后来居上！"></a>不公平：他凭什么后来居上！</h3><h3 id="额外开销大：因为是抢占式也就是会频繁任务切换，调度额外开销大。"><a href="#额外开销大：因为是抢占式也就是会频繁任务切换，调度额外开销大。" class="headerlink" title="额外开销大：因为是抢占式也就是会频繁任务切换，调度额外开销大。"></a>额外开销大：因为是抢占式也就是会频繁任务切换，调度额外开销大。</h3><h3 id="最重要的一点几乎没有适用场景，因为正常情况下你是不知道一个进程所需要的时间，不过你可以设计一些启发式算法去写一个估计函数，去大概预测这个时间。"><a href="#最重要的一点几乎没有适用场景，因为正常情况下你是不知道一个进程所需要的时间，不过你可以设计一些启发式算法去写一个估计函数，去大概预测这个时间。" class="headerlink" title="最重要的一点几乎没有适用场景，因为正常情况下你是不知道一个进程所需要的时间，不过你可以设计一些启发式算法去写一个估计函数，去大概预测这个时间。"></a>最重要的一点几乎没有适用场景，因为正常情况下你是不知道一个进程所需要的时间，不过你可以设计一些启发式算法去写一个估计函数，去大概预测这个时间。</h3><ol start="3">
<li>时间片轮转算法：</li>
</ol>
<p>最古老、最简单、最公平且使用最广的算法就是时间片轮转（<strong>Round Robin, RR</strong>）调度算法。接下来说的几个时间调度算法都是基于此算法进行的优化。</p>
<p>给队列中的每个任务一个时间片，第一个任务先执行，时间片到了之后，将此任务放到队列尾部，切换到下个任务执行，这样能解决SJF中耗时长任务饥饿的问题。算法介于FIFO和SJF之间，若时间片足够大，则退化到FIFO，若分片足够小（假设不考虑任务切换的开销），则任务的完成时间顺序是以耗时从小到大排列（相比SFJ，任务执行的绝对时间会长，取决于队列中任务的个数）。</p>
<h3 id="优点：-2"><a href="#优点：-2" class="headerlink" title="优点："></a>优点：</h3><h3 id="每个任务都能够得到公平的调度"><a href="#每个任务都能够得到公平的调度" class="headerlink" title="每个任务都能够得到公平的调度"></a>每个任务都能够得到公平的调度</h3><h3 id="耗时短的任务即使落在耗时长的任务后面，也能够较快的得到调度执行"><a href="#耗时短的任务即使落在耗时长的任务后面，也能够较快的得到调度执行" class="headerlink" title="耗时短的任务即使落在耗时长的任务后面，也能够较快的得到调度执行"></a>耗时短的任务即使落在耗时长的任务后面，也能够较快的得到调度执行</h3><h3 id="缺点：-2"><a href="#缺点：-2" class="headerlink" title="缺点："></a>缺点：</h3><p><strong>任务切换引起的调度开销较大，需要多次切换任务上下文</strong>（特别是CPU的Cache，多次切换容易导致Cache完全不命中，需要重新从内存加载，这个非常耗时）</p>
<p><strong>·</strong> <strong>时间片不太好设置</strong>（若设置短了，调度开销大，若设置长了，极端情况是退化到FIFO<em><strong>*）*</strong></em></p>
<h3 id="动态优先权轮转调度算法及优先队列优化："><a href="#动态优先权轮转调度算法及优先队列优化：" class="headerlink" title="动态优先权轮转调度算法及优先队列优化："></a>动态优先权轮转调度算法及优先队列优化：</h3><p>前面所说的轮转调度算法有个假设性前提，那就是所有进程都一样重要，因此每个进程执行相同时间片时间，这样看上去是公平的，但实际上我们希望调度是有优先级的，即希望调度程序能从就绪队列中选择最高优先级的进程进行运行，这称为最高优先级（<strong>Highest Priority First，HPF</strong>）调度算法。</p>
<p>而最高优先级调度算法分为两种，一种是静态优先级，也就是创建进程时候，就已经确定了优先级了，然后整个运行时间优先级都不会变化。另外一种就是重点要说的动态优先级。</p>
<p><strong>动态优先级</strong>：根据进程的动态变化调整优先级，比如如果进程运行时间增加，则降低其优先级，如果进程等待时间（就绪队列的等待时间）增加，则升高其优先级，也就是<strong>随着时间的推移增加等待进程的优先级</strong>，但是实际上你想去让等待进程的优先级随着等待时间增高，不如让正在进行的进程优先级降低，因为正在进行的进程是很好被操作的，而且你要去处理等待进程就意味着额外开销，并且不好去处理，所以相对来说等待进程优先增加就等于正在进行的进程优先级降低。</p>
<p>但是这时候又会涉及一个问题也就是是否抢占，意思就是如果现在队伍中出现一个进程优先级比正在进行的进程优先级要高的进程是否要结束这个正在进行的进程去进行这个新的优先级最高的进程，在我看来，我认为非抢占式是合理的，但不意味着抢占式就不合理我一开始也说了，只有最合适，没有哪个是最好的，我采取非抢占式的原因就是，当你进行抢占的时候就会意味着额外开销，并且正在进行的进程他优先级也不低，他能进行肯定有他能进行的理由（也就是优先级高但不是最高），与其打断他的进行最选择优先级最高的来达成看上去最优的操作（因为从设计思路出发来看应该一直处理优先级最高的），但实际上开销带来的损失不一定让其是最优的。</p>
<p><strong>算法实现优化：</strong></p>
<p>说完了原理和思路，我说一下我的实现和优化，我看了很多网上别人的代码，大多都采取了排序这一方法来进行动态优先处理，但是每次排序都意味着O(NlogN)的时间复杂度，而且这还是理论最优的（《算法导论》证明过一切比较式的排序时间复杂度下限是O(NlogN)。但是他们这么处理是因为他们处理优先级的时候选择的是让等待时间长的进程优先级增加，所以要对所有的进程进行排序，但是我这里采用的是优先队列去优化，也就是大根堆（优先级最高的在堆顶），我刚刚也说了，我只处理正在进行的进程，让其优先级降低，这样也能使算法实现，并且更好操作，也就是每次执行进程的时候，我让其优先级降低，然后执行一次pushdown()操作，时间复杂度是(MlogN)，M一点比N小，因为M是正在进行的线程N是总线程数。而且这也解决了一个问题就是，优先级高的会一直在堆顶，那他执行完一个时间片还是执行他但这样就不会了因为他优先级下去了。</p>
<p><img src="file:///C:\Users\mibbp\AppData\Local\Temp\ksohtml\wps3FD8.tmp.jpg" alt="img"></p>
<p> 接下来的操作就很简单了，每次取出堆顶，然后运行一个时间片，如果进程运行结束就弹出队列，否则更改优先级重新入队</p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> priority;<span class="comment">//设置优先级  </span></span><br><span class="line">	string name;</span><br><span class="line">	<span class="keyword">int</span> time;<span class="comment">//根据优先级设置时间 </span></span><br><span class="line">	<span class="keyword">int</span> startTime;<span class="comment">//开始时间 </span></span><br><span class="line">	<span class="keyword">int</span> endTime;<span class="comment">//结束时间 </span></span><br><span class="line">	<span class="comment">//通过开始和结束时间我知道其执行的时间，优先级</span></span><br><span class="line">	<span class="comment">//减去这个执行时间+x(这个x要满足当前堆顶减去这个值后要比所有进程</span></span><br><span class="line">	<span class="comment">//优先级都要小很简单记录一下最小的就行了）便是更新后的优先级然后pushdown入队 </span></span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;a) <span class="keyword">const</span><span class="comment">//重载运算符 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> priority&gt;a.priority;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue &lt;Node,vector&lt;Node&gt; &gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(Node x,<span class="keyword">bool</span> flag)</span></span>&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;进程名称：&quot;</span>&lt;&lt;x.name&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;x.priority&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	<span class="keyword">if</span>(flag) cout&lt;&lt;<span class="string">&quot;正在进行&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;运行完毕&quot;</span>;</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> time,Min=<span class="number">0x3f3f3f3f</span>;<span class="comment">//time是时间片大小一般为25~50ms,Min为当前队列最小优先级 </span></span><br><span class="line">vector &lt;Node&gt; v;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">		Node x=q.<span class="built_in">top</span>();<span class="comment">//取出堆顶</span></span><br><span class="line">		<span class="keyword">if</span>(x.endTime&lt;=time)&#123;</span><br><span class="line">			<span class="built_in">print</span>(x,!flag);<span class="comment">//自定义输出函数 </span></span><br><span class="line">			q.<span class="built_in">pop</span>();</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			x.priority=(Min-time);<span class="comment">//自动进行pushdown </span></span><br><span class="line">			Min=<span class="built_in">min</span>(x.priority,Min);</span><br><span class="line">			x.endTime-=time;</span><br><span class="line">			<span class="built_in">print</span>(x,flag);</span><br><span class="line">			q.<span class="built_in">pop</span>();</span><br><span class="line">			q.<span class="built_in">push</span>(x);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node x,Node y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x.startTime&lt;y.startTime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;输入进程数：&quot;</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;设置时间片时间：&quot;</span>&lt;&lt;endl; </span><br><span class="line">	cin&gt;&gt;time;</span><br><span class="line">	Node x;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;输入进程信息：&quot;</span>&lt;&lt;endl; </span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;进程名称：&quot;</span>&lt;&lt;<span class="string">&quot;	&quot;</span>&lt;&lt;<span class="string">&quot;进程优先级&quot;</span>&lt;&lt;<span class="string">&quot;	&quot;</span>&lt;&lt;<span class="string">&quot;进程开始时间：&quot;</span></span><br><span class="line">	&lt;&lt;<span class="string">&quot;	 &quot;</span>&lt;&lt;<span class="string">&quot;进程结束时间：&quot;</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		cin&gt;&gt;x.name;</span><br><span class="line">		cin&gt;&gt;x.priority;</span><br><span class="line">		cin&gt;&gt;x.startTime;</span><br><span class="line">		cin&gt;&gt;x.endTime;</span><br><span class="line">		v.<span class="built_in">push_back</span>(x);</span><br><span class="line">		Min=<span class="built_in">min</span>(Min,x.priority);</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">int</span> cou=<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">sort</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> it : v)&#123;</span><br><span class="line">		q.<span class="built_in">push</span>(it);</span><br><span class="line">	&#125;	</span><br><span class="line">	<span class="built_in">solve</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结果展示："><a href="#结果展示：" class="headerlink" title="结果展示："></a>结果展示：</h2><p><img src="file:///C:\Users\mibbp\AppData\Local\Temp\ksohtml\wps9874.tmp.jpg" alt="img"> </p>
<p><img src="file:///C:\Users\mibbp\AppData\Local\Temp\ksohtml\wps9875.tmp.jpg" alt="img"></p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol>
<li><p>通过此次设计优化算法大大加深了我对算法以及设计算法出发点和数据结构的理解和运用。</p>
</li>
<li><p>学习并理解了理解和掌握动态优先权以及轮转调度算法的思想、 设计与实现方法和进程概念。</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>检验赛d题题解</title>
    <url>/2021/12/15/%E6%A3%80%E9%AA%8C%E8%B5%9Bd%E9%A2%98%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>链接：<a href="https://vjudge.net/contest/418598#problem/D">https://vjudge.net/contest/418598#problem/D</a></p>
<p>　　这个题很容易会想到去分离位数，然后加起来是三的倍数那么这个数就是三的倍数，然后我一开始的想法是把位数分离，把不是三的倍数的位数存到一个数组，然后先删掉一个位数去看剩下的和是不是三的倍数，没有的话ans++,然后去删两个，直到全部删掉ans就是-1，但是这样我觉得会超时（其实是我搜索不太行），然后在我去拿一些数据分离位数然后去想的时候发现，其实不需要把所有的位数存到数组里，因为所有的位数其实都可以看成1，2.为什么呢，因为我们的位数要加起来去余3，就比如a+b+c%3,就是a%3+b%3+c%3,而%3的结果只有1，2，发现了这个·就很简单了，用a[1]去记是%3==1的位数出现的次数，a[2]去记%3==2的位数出现的次数.</p>
<p>　　然后这么想，如果所有位数%3余数为1，这个1是怎么来的，有两种情况，一种是一个1，或者两个2，如果是两个1余数是2，3个1余数为0，四个1相当于一个1，同理2也是这样，所以总和余数出现了1，只需要删掉一个1，或者两个2，但是这个时候就有特例比如说1，1%3的余数是1按理删掉一个1就可以了，但是用脚想都知道1凑不出3的倍数，所以这种情况特判呗，就是只有一位数这位书为1类数输出-1，同理22也是，当是两位数且是2类数输出-1.</p>
<p>　　那么余数是2的情况也是类似，有两种情况，一种就是一个2类数，一种就是两个1类，只需要删掉一个2类或者2个一类就可以了，只有一位2类数和两位1类数要特判。</p>
<p>　　最后删掉一个ans++，删不掉ans=-1然后一开始直接判断是不是3的倍数。</p>
<p>　　代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n,sum=<span class="number">0</span>,ans=<span class="number">0</span>,nn,cou=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;n);</span><br><span class="line">    nn=n;</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        a[n%<span class="number">10</span>%<span class="number">3</span>]++;</span><br><span class="line">        sum+=n%<span class="number">10</span>;</span><br><span class="line">        n/=<span class="number">10</span>;</span><br><span class="line">        cou++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum%<span class="number">3</span>==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">1</span>]&gt;<span class="number">0</span>&amp;&amp;cou&gt;<span class="number">1</span>)ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[<span class="number">2</span>]&gt;=<span class="number">2</span>&amp;&amp;cou&gt;<span class="number">2</span>)ans=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> ans=<span class="number">-1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">2</span>]&gt;<span class="number">0</span>&amp;&amp;cou&gt;<span class="number">1</span>)ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[<span class="number">1</span>]&gt;=<span class="number">2</span>&amp;&amp;cou&gt;<span class="number">2</span>)ans=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> ans=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>数据库笔记</title>
    <url>/2022/01/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="数据库笔记"><a href="#数据库笔记" class="headerlink" title="数据库笔记"></a>数据库笔记</h1><h2 id="第一节-数据库基本概念"><a href="#第一节-数据库基本概念" class="headerlink" title="第一节 数据库基本概念:"></a>第一节 数据库基本概念:</h2><h3 id="1-数据："><a href="#1-数据：" class="headerlink" title="1.数据："></a>1.数据：</h3><p>定义：描述事物的符号序列</p>
<p>计算机中数据分为两部分：</p>
<p>1.临时性数据（比如内存里面的数据）</p>
<p>2.持久性数据（比如磁盘里的数据）</p>
<p>数据有型（type)与值（value)之分：</p>
<p>type:数据表示的类型，如整型，字符型</p>
<p>value:符合给定型的值</p>
<h3 id="2-数据库："><a href="#2-数据库：" class="headerlink" title="2.数据库："></a>2.数据库：</h3><p>Database(DB)</p>
<p>定义：数据的集合</p>
<h3 id="3-数据库系统："><a href="#3-数据库系统：" class="headerlink" title="3.数据库系统："></a>3.数据库系统：</h3><p>DatabaseSystem(DBS)</p>
<p>指在计算机系统引入数据库和数据库管理系统(DBMS)后的完整系统</p>
<p>在不引起混淆的前提下把数据库系统简称为数据库</p>
<h3 id="4-数据库应用系统："><a href="#4-数据库应用系统：" class="headerlink" title="4.数据库应用系统："></a>4.数据库应用系统：</h3><p>数据库应用系统(DBAS)</p>
<p>组成：数据库系统+应用软件+应用界面</p>
<h2 id="第二节-软件工程与数据库技术："><a href="#第二节-软件工程与数据库技术：" class="headerlink" title="第二节 软件工程与数据库技术："></a>第二节 软件工程与数据库技术：</h2><h3 id="1-软件工程："><a href="#1-软件工程：" class="headerlink" title="1.软件工程："></a>1.软件工程：</h3><p>是用工程，科学和数学原则与方法来开发，维护计算机软件的有关技术和管理方法</p>
<p>由方法，工具和过程三部分组成—软件工程三要素</p>
<h3 id="2-软件生存周期："><a href="#2-软件生存周期：" class="headerlink" title="2.软件生存周期："></a>2.软件生存周期：</h3><p>软件产品从定义开始经过开发，使用于维护直到最后推一的全过程</p>
<h3 id="3-数据库工程："><a href="#3-数据库工程：" class="headerlink" title="3.数据库工程："></a>3.数据库工程：</h3><p>数据库应用系统开发是一项软件工程，但又有自己的特点，所以称为数据库工程</p>
<p>数据库工程按内容可分为两部分：数据库设计和相应的应用设计与实现</p>
<p>数据库应用系统的设计开发必须有软件过程模型作为指导</p>
<p>典型的软件开发模型有：<strong>瀑布模型</strong>，快速原型模型，螺旋模型等</p>
<h2 id="第三节-DBAS生命周期模型："><a href="#第三节-DBAS生命周期模型：" class="headerlink" title="第三节 DBAS生命周期模型："></a>第三节 DBAS生命周期模型：</h2><p>参照瀑布模型原理，DBAS的生命周期由项目规划，需求分析，系统设计，实现与部属，运行管理与维护等5个基本活动组成</p>
<p>根据DBAS的软件组成和各自功能，分为数据组织与存储设计，数据访问与处理设计，应用设计三条设计主线</p>
<p>更具数据库系统三级模式结构DBAS设计阶段分为概念设计逻辑设计，物理设计三个步骤，每一步设计内容涵盖了三条设计主线</p>
<h3 id="1-规划与分析："><a href="#1-规划与分析：" class="headerlink" title="1.规划与分析："></a>1.规划与分析：</h3><p>是DBAS生命周期第一步，从技术，操作，经济三个方面去分析</p>
]]></content>
  </entry>
  <entry>
    <title>背包问题的理解与优化</title>
    <url>/2021/12/10/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>　　今天学习了简单的几个背包问题，分别是01背包、完全背包、多重背包，在此总结一下我对背包问题的理解和优化的思路。</p>
<p>　　01背包：</p>
<p>　　01背包思路很简单一开始我写的是二维，很好理解，01背包问题的关键就是什么时候选时候不选，f[i][j]就是在前i个物品，j个大小内最大能装的数量，假设f[i-1][j]也就是对于容量位j的情况下前i-1个物品的最优解已经确立，对于f[i][j]的最优解只需要看第i个物品选还是不选就行了。</p>
<p>不选就是f[i-1][j]选就是f[i-1][j-v[i]]+m[i]，选择两者中最大的就行，不过进行比较前的先让f[i][j]=f[i-1][j]然后进行判断j&gt;=v[i],dddd，f[0][0]的情况是确立的为0，然后递推就可以了，最后从f[n][0~v]取最大值就是答案。</p>
<p>　　代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span>#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> N,V;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">1010</span>],m[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;N,&amp;V);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;v[i],&amp;m[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=V;j++)&#123;</span><br><span class="line">            f[i][j]=f[i<span class="number">-1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(j&gt;=v[i])</span><br><span class="line">                f[i][j]=<span class="built_in">max</span>(f[i][j],f[i<span class="number">-1</span>][j-v[i]]+m[i]);</span><br><span class="line">            </span><br><span class="line">                    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=V;i++) ans=<span class="built_in">max</span>(ans,f[N][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优化：</p>
<p>　　二维很好理解但是开的数组很大，所以把它优化为一维，一般优化的时候我们做等价变化，把一维全部一去然后会发现核心判断变成了这样</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=V;j++)&#123;</span><br><span class="line">        f[j]=<span class="built_in">max</span>(f[j],f[j-v[i]]+m[i]);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但其实很容易就发现问题，因为我们一开始写的是f[i][j]和f[i-1][j-v[i]]，但到这里就会发现其实不是i-1]而是i,为了解决这个问题只需要从大到小去推就行了，</p>
<p>其实很好理解，外部循环我们是从小到大的，内部从大到小，j-v[i]一定小于j所以在内部的循环一定是先进行j在进行j-v[i]，所以现在的j-v[i]是没有更新过的，</p>
<p>也就是f[i-1]的情况。最后只需要输出f[V]就可以了因为一开始都初始化为0,f[V]的意思就是容量为v的最优解，即使最优解实际容量不是v，可能是k，也可以</p>
<p>从f[k]的情况转移到f[v]。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,x,y;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=x;j--)&#123;</span><br><span class="line">            f[j]=<span class="built_in">max</span>(f[j-x]+y,f[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[m];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　完全背包：</p>
<p>　　完全背包和01背包看似只有内部循环的顺序不同但其实对于这个的理解还是要很深的，先上代码。</p>
<p>　　代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> N,V;</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">1010</span>],w[<span class="number">1010</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;N,&amp;V);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;v[i],&amp;w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=v[i];j&lt;=V;j++)&#123;</span><br><span class="line">            f[j]=<span class="built_in">max</span>(f[j],f[j-v[i]]+w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,f[V]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">首先先分析，完全背包和<span class="number">01</span>背包的区别就是可以选多次，所以对于f[i][j]就不再是选与不选两种情况而是选k种与不选的多种情况，对于不选还是f[i<span class="number">-1</span>][j]，</span><br><span class="line"></span><br><span class="line">选一种就是f[i<span class="number">-1</span>][j-v[i]]+w[i]，两种就是f[<span class="number">-1</span>][j<span class="number">-2</span>v[i]]+<span class="number">2</span>w[i]...f[i<span class="number">-1</span>][j-kv[i]]+kw[i]，也就是容量上限的时候，其实对于这种很容易就可以想到再加一个循环枚举<span class="number">0</span></span><br><span class="line"></span><br><span class="line">到k的情况然后取最大值就可以，但是也很容易就想到这样会超时，而之所以代码只进行了一次比较是有很大原因的。</span><br><span class="line"></span><br><span class="line">　　继续分析，对于f[i][j-w[i]]来说，就相当于是</span><br><span class="line">    						f[i<span class="number">-1</span>][j-v[i]]　　      f[i<span class="number">-1</span>][j<span class="number">-2</span>v[i]]+w[i]　　   ...　　f[i<span class="number">-1</span>][j-k+<span class="number">1</span>v[i]]+kw[i]　　<span class="comment">//他有的下面都有就是少个w[i]所以下面要考虑的他已经考虑过了</span></span><br><span class="line">而f[i][j]则是f[i<span class="number">-1</span>][j]　　　  f[i<span class="number">-1</span>][j-v[i]]+w[i]　  f[<span class="number">-1</span>][j<span class="number">-2</span>v[i]]+<span class="number">2</span>w[i]　　  ...　　f[i<span class="number">-1</span>][j-kv[i]]+kw[i]　</span><br><span class="line"></span><br><span class="line">很容易就看出f[i][j]其实就是f[i][j-v[i]]加上w[i]与f[i<span class="number">-1</span>][j]的最大值。然后我们是从小到大去递，所以一开始的f[j]是没有更新的f[j]也就是f[i<span class="number">-1</span>][j]，而j-v[i]比j小所以</span><br><span class="line"></span><br><span class="line">f[j-v]是已经更新过的也就是f[i][j-v],最后输出f[v]。</span><br></pre></td></tr></table></figure>



]]></content>
  </entry>
  <entry>
    <title>计算机图形学实验一 《MFC绘图基础》</title>
    <url>/2022/03/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AE%9E%E9%AA%8C%E4%B8%80%20%E3%80%8AMFC%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E3%80%8B/</url>
    <content><![CDATA[<h1 id="计算机图形学实验一-《MFC绘图基础》"><a href="#计算机图形学实验一-《MFC绘图基础》" class="headerlink" title="计算机图形学实验一 《MFC绘图基础》"></a>计算机图形学实验一 《MFC绘图基础》</h1><h2 id="视频讲解：（等我出狱就录视频，目前还在隔离）"><a href="#视频讲解：（等我出狱就录视频，目前还在隔离）" class="headerlink" title="视频讲解：（等我出狱就录视频，目前还在隔离）"></a>视频讲解：（等我出狱就录视频，目前还在隔离）</h2><h2 id="一-MFC介绍"><a href="#一-MFC介绍" class="headerlink" title="一.MFC介绍"></a>一.MFC介绍</h2><h3 id="1-基本介绍："><a href="#1-基本介绍：" class="headerlink" title="1.基本介绍："></a>1.基本介绍：</h3><p>MFC是<a href="https://baike.baidu.com/item/%E5%BE%AE%E8%BD%AF%E5%85%AC%E5%8F%B8/732128">微软公司</a>提供的一个<a href="https://baike.baidu.com/item/%E7%B1%BB%E5%BA%93/3351433">类库</a>,以<a href="https://baike.baidu.com/item/C%2B%2B%E7%B1%BB/9567879">C++类</a>的形式封装了<a href="https://baike.baidu.com/item/Windows%20API/6088382">Windows API</a>，并且包含一个应用程序框架。</p>
<p>说人话就是一个框架里面自带很多工具，减少了很多你编码得时间提高效率。</p>
<p>因为自带一个框架所以在你创建MFC应用的时候就可以运行。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/d85c288e928e9f257d57542d051e6b07.png" alt="图片.png"></p>
<p>关于各分区域的介绍他都有中文写着的也不需要了解太多，需要知道的就是中间那个白色矩形框叫<strong>客户区</strong>,<strong>我们一般</strong>绘制图形都是在这个区域上绘制的。</p>
<p>接下来介绍一下MFC工程信息</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/4824a0ce33a2fe1c43f0d41f6533df50.png" alt="图片.png"></p>
<p>主要就是右边解决方案视图如果你没有这个你点一下最上面那个视图的第一个解决方案资源管理器就有了。这个视图主要就是看头文件和源文件，C++的类就是由源文件和头文件组成得。</p>
<p><strong>头文件</strong>：一般类的声明（包括类成员和方法的声明），函数原型，#define（宏定义）等，一般不写具体实现。</p>
<p><strong>源文件</strong>：主要写实现头文件已经声明的那些函数的具体代码，需要注意的是，在文件开头必须#include实现的头文件，不过这个框架基本都是声明好的如果你新写了一个类，然后在源文件去实现对应的头文件函数那就得#include声明</p>
<p>主要就是介绍一下TestView类（这个Test取决于你这个工程叫啥你叫aaa那就是aaaView)，这个类就是将文档中的数据可视化，我们绘制图像就是通过这个类来实现的。</p>
<h3 id="2-OnDraw-CDC-pDC-函数"><a href="#2-OnDraw-CDC-pDC-函数" class="headerlink" title="2.OnDraw(CDC* pDC)函数"></a>2.OnDraw(CDC* pDC)函数</h3><p>在MFC中我们绘制图形就是在TestViwe类中的OnDraw函数中实现的。他专业有中文注释一看就知道就在那个TODO注释下面写代码就行，如果你想深入了解OnDraw函数可以去看他的官方文档</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/beeff182148d7289b9aa47c63e5bb762.png" alt="图片.png"></p>
<p>你用鼠标点一下你想查的然后再点一下练级搜索去看他的官方文档就行了或者一些大佬写的博客也行，这里我只是简单介绍一下。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ca77b30be7d6676e664e1ea94961e5aa.png" alt="图片.png"></p>
<p>首先刚刚说了TestView类就是将文档中的数据可视化，而绘制就是通过Ondraw来实现的所以代码前几行自带的意思就是把CDC指针指向文档然后判断指针是否正确指向了，然后那个CDC指针一开始是注释掉的因为在你创建这个工程的时候并没有绘制任何东西所以把他注释掉是为了不报warning,不注释掉他可能就会说你没用占着* * 不拉*，不过接下来我们要绘制图像肯定是要用他的所以要把它释放出来就是把注释解除。</p>
<h3 id="3-CDC："><a href="#3-CDC：" class="headerlink" title="3.CDC："></a>3.CDC：</h3><p>这里简单介绍一下CDC类，同样想深入了解的可以百度去查，这里简单介绍一下，首先他的翻译就很垃圾很误人子弟，CDC类定义的是设备上下文对象的类，这是官方说的因为DC英文是(Device Context)直译过来就是设备上下文，但是这个翻译很让人难理解更准确的来说他应该叫设备环境，设备场景等。</p>
<p>关于设备环境他就是就是是一个Windows数据结构，或者也有人说是一个结构体，是一个类等等都可以，它包含了某个设备的绘制属性。通常，绘制调用都是借助于上下文对象，而这些<strong>设备上下文对象封装了用于画线、形状、文本等的Windows API</strong>。</p>
<p>说人话就是，假如你正在画画，那设备环境就是那张画布，加上很多工具比如画笔，画刷，颜料等等，接下来请记住一点<strong>Widnows下的所有绘图都是通过设备场景进行的。</strong></p>
<h3 id="4-常见设备上下文及区别：CClientDC-CPaintDC-CWindowDC"><a href="#4-常见设备上下文及区别：CClientDC-CPaintDC-CWindowDC" class="headerlink" title="4.常见设备上下文及区别：CClientDC,CPaintDC,CWindowDC"></a>4.常见设备上下文及区别：CClientDC,CPaintDC,CWindowDC</h3><p> <strong>CClientDC</strong>：（<strong>客户区</strong>设备上下文）用于客户区的输出，与特定窗口关联，可以让开发者访问目标窗口中客户区，其构造函数中包含了GetDC,</p>
<p>析构函数中包含了ReleaseDC。只能在客户区绘制图形。</p>
<p> <strong>CPaintDC</strong>：只能在客户区绘制图形。（1）CPaintDC类是CDC类的一个派生类，<strong>该类一般用在响应WM_PAINT消息的函数OnPaint()中</strong>。（2）WM_PAINT消息是当窗口的某个区域需要重画时激发的窗口消息。当程序中的消息循环接到WM_PAINT消息时就自动调用消息处理函数OnPaint()，如果在OnPaint函数内定义了CPaintDC类的对象，通过这个类对象就可以使用CDC类的成员函数完成视图客户区中的图形绘制操作。（3）CPaintDC用于响应窗口重绘消息（WM_PAINT）时的绘图输出。CPaintDC在<strong>构造函数中调用BeginPaint()取得设备上下文</strong>，在<strong>析构函数中调用EndPaint()释放设备上下文</strong>。EndPaint()除了释放设备上下文外，还负责从消息队列中清除WM_PAINT消息。因此，在处理窗口重画时，必须使用CPaintDC，否则WM_PAINT消息无法从消息队列中清除，将引起不断的窗口重画。CPaintDC也只能用在WM_PAINT消息处理之中。</p>
<p> <strong>CWindowsDC</strong>：(1)可在非客户区绘制图形，而CClientDC，CPaintDC只能在窗口的客户区绘制图形。(2)坐标原点是在窗口的左上角，CClientDC，CPaintDC的坐标原点是在客户区的左上角。</p>
<h3 id="5-获取设备上下文的方法"><a href="#5-获取设备上下文的方法" class="headerlink" title="5.获取设备上下文的方法:"></a>5.获取设备上下文的方法:</h3><p>1、<strong>通过OnDraw()函数获得CPaintDC：在OnDraw（）函数中入口参数CDC *pDC，传入这即操作的设备上下文，这个上下文既是CPaintDC</strong>。他是通过OnPaint()构建，并传入OnDraw(),View类如果没有重载OnPaint()，则窗口刷新时自动调用MFC底层代码的OnPaint()函数，从而调用OnDraw()。我们就可以通过OnDraw()在客户区进行初始化的绘制。</p>
<p>2、<strong>通过CClientDC,CPaintDC,CWindowDC定义一个DC</strong>。</p>
<p>例如：CClientDC dc(this);创建一个dc，在当前对象的客户区。创建一个CWindowDC类的对象：CWindowDC dc(this);</p>
<h2 id="二-MFC基本绘图函数和类介绍"><a href="#二-MFC基本绘图函数和类介绍" class="headerlink" title="二.MFC基本绘图函数和类介绍"></a>二.MFC基本绘图函数和类介绍</h2><h3 id="常见类："><a href="#常见类：" class="headerlink" title="常见类："></a>常见类：</h3><ul>
<li> CPoint类：存放点坐标(x，y)；</li>
<li>CRect类：存放矩形左上顶点和右下角顶点的坐标(top、left、right、bottom)，其中(top，left)为矩形的左上角点，(right，bottom)为矩形的右下角点；</li>
<li>CSzie类：存放矩形的宽度和高度的坐标(cx，cy)，其中cx为矩形的宽度，cy为矩形的高度。</li>
<li> CBitmap：封装了一个GDI位图，提供位图操作的接口；</li>
<li> CFont：封装了GDI字体，可以选作设备上下文中的当前字体；</li>
<li> CBrush：封装了GDI画刷，选作设备上下文的当前画刷，画刷用于填充图形内部；</li>
<li>CPen：封装了GDI画笔，选作设备上下文的当前画笔，画笔用于绘制图形边界线；</li>
<li>CPallette：封装了GDI调色板，提供应用程序和显示器之间的颜色接口；</li>
<li>CGdiObject：GDI绘图工具的基类，一般不能直接使用。</li>
</ul>
<h3 id="常用函数："><a href="#常用函数：" class="headerlink" title="常用函数："></a>常用函数：</h3><table>
<thead>
<tr>
<th>函数名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>CreatePen</td>
<td>创建画笔，属性：线性（比如实线虚线等），宽度，颜色、</td>
</tr>
<tr>
<td>CreateSolidBrush</td>
<td>创建画刷，填充<strong>封闭</strong>图形</td>
</tr>
<tr>
<td>SetPixel</td>
<td>绘制像素点，返回画的那个点的RGB值（0，255）</td>
</tr>
<tr>
<td>SetPixelV</td>
<td>同上但是返回的是true和false，所以比上面那个快一般都用这个</td>
</tr>
<tr>
<td>MoveTo</td>
<td>参数是一个点的x,y坐标，表示移动到当前位置。</td>
</tr>
<tr>
<td>LineTo</td>
<td>参数同上，绘制直线段</td>
</tr>
<tr>
<td>Rectangle</td>
<td>绘制矩形</td>
</tr>
<tr>
<td>Ellipse</td>
<td>绘制椭圆</td>
</tr>
<tr>
<td>FillSolidRect</td>
<td>填充矩形颜色</td>
</tr>
</tbody></table>
<p><img src="https://img-blog.csdnimg.cn/img_convert/c8dac058975b0ae1f9b8f3489aabb794.png" alt="1.png"></p>
<p>其他函数可以自己摸索着试试你用的时候看看原型参数是啥画一画，所见即所学的东西就不赘述了。</p>
<p>不过要说的是设备默认坐标系是原点在左上角，x向右为正方形，y向下为正方向，但这样其实是反逻辑的，所以接下来介绍如何自定义二维坐标系</p>
<h2 id="二-自定义二维坐标系"><a href="#二-自定义二维坐标系" class="headerlink" title="二.自定义二维坐标系"></a>二.自定义二维坐标系</h2><p>为什么要自定义二维坐标系呢，简单地说比如你画个圆如果实在默认设备坐标系下的话只能画出1/4圆<img src="https://img-blog.csdnimg.cn/img_convert/aa25813f05bed9085d85556d8e55dccb.png" alt="image-20220318133122034.png"></p>
<p>大概就是这样，所以为了能更好的展示我们绘制的图像自定义坐标系，通常就是这样<img src="https://img-blog.csdnimg.cn/img_convert/18caae440971a731fcfd196d9281af20.png" alt="image-20220318133346045.png"></p>
<p>就是原点在中心，x向右为正方形，y向上为正方向</p>
<h3 id="1-设置映射函数"><a href="#1-设置映射函数" class="headerlink" title="1.设置映射函数"></a>1.设置映射函数</h3><p>使用映射模式函数，设置窗口大小和视区大小相等自定义二维坐标系，</p>
<p>映射模式很多就说一个最常用的</p>
<table>
<thead>
<tr>
<th>模式代码</th>
<th>宏定义值</th>
<th>坐标系特征</th>
</tr>
</thead>
<tbody><tr>
<td>MM_ANISOTROPIC</td>
<td>8</td>
<td>逻辑单位被转换为任意单位，x轴和y轴的方向和比例独立设置</td>
</tr>
</tbody></table>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CTestView::OnDraw</span><span class="params">(CDC* pDC)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CTestDoc* pDoc = <span class="built_in">GetDocument</span>();<span class="comment">//指针指向文档（document)把文档把文档以视图形式展现</span></span><br><span class="line">	<span class="built_in">ASSERT_VALID</span>(pDoc);<span class="comment">//判定指针是否为空</span></span><br><span class="line">	<span class="keyword">if</span> (!pDoc)<span class="comment">//为空就返回</span></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> 在此处为本机数据添加绘制代码</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//自定义二维坐标系</span></span><br><span class="line">	CRect rect;<span class="comment">//创建矩形对象</span></span><br><span class="line">	<span class="built_in">GetClientRect</span>(rect);<span class="comment">//初始化矩形为客户区</span></span><br><span class="line">	pDC-&gt;<span class="built_in">SetMapMode</span>(MM_ANISOTROPIC);<span class="comment">//设置映射模式为各向异性的</span></span><br><span class="line">	pDC-&gt;<span class="built_in">SetWindowExt</span>(rect.<span class="built_in">Width</span>(),rect.<span class="built_in">Height</span>());<span class="comment">//设置窗口的宽度和高度</span></span><br><span class="line">	pDC-&gt;<span class="built_in">SetViewportExt</span>(rect.<span class="built_in">Width</span>(),-rect.<span class="built_in">Height</span>());<span class="comment">//设置视区的宽度和高度，同时设置坐标系正方向</span></span><br><span class="line">	pDC-&gt;<span class="built_in">SetViewportOrg</span>(rect.<span class="built_in">Width</span>() / <span class="number">2</span>, rect.<span class="built_in">Height</span>() / <span class="number">2</span>);<span class="comment">//设置原点坐标于中心</span></span><br><span class="line">	rect.<span class="built_in">OffsetRect</span>(-rect.<span class="built_in">Width</span>()/<span class="number">2</span>,-rect.<span class="built_in">Height</span>()/<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//由于坐标系变化，此时rect相对于客户区的位置发生改变，位于客户区新坐标原点右上方，可以将其平移恢复与客户区重合，否则后续如果需要继续使用rect属性如top,left等会出错</span></span><br><span class="line"></span><br><span class="line">	<span class="function">CPoint <span class="title">p0</span><span class="params">(<span class="number">-100</span>, <span class="number">-100</span>)</span>, <span class="title">p1</span><span class="params">(<span class="number">100</span>, <span class="number">-100</span>)</span>,<span class="title">p2</span><span class="params">(<span class="number">0</span>, <span class="number">200</span>)</span></span>;<span class="comment">//绘制三角形</span></span><br><span class="line">	pDC-&gt;<span class="built_in">MoveTo</span>(p0);</span><br><span class="line">	pDC-&gt;<span class="built_in">LineTo</span>(p1);</span><br><span class="line">	pDC-&gt;<span class="built_in">LineTo</span>(p2);</span><br><span class="line">	pDC-&gt;<span class="built_in">LineTo</span>(p0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你要是不理解就把这个记住存下来当个模板用就行，以后写的时候直接复制上去就行通用的基本上</p>
<p><img src="https://img-blog.csdnimg.cn/2021032522373343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lpUmVuR2VuZ1NoYW5nQnVRaQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20210325223743991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lpUmVuR2VuZ1NoYW5nQnVRaQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>自定义坐标系绘制结果</strong></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/7659143120f41501036fcf7e33d6c9a9.png" alt="image-20220318135622367.png"></p>
<p><strong>未自定义坐标系结果</strong></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/69b2f74738b49cceadd2a5b068086157.png" alt="image-20220318135938037.png"></p>
]]></content>
  </entry>
  <entry>
    <title>java习题</title>
    <url>/2021/12/09/java%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<h1 id="7-12-图形继承-20-分"><a href="#7-12-图形继承-20-分" class="headerlink" title="7-12 图形继承 (20 分)"></a>7-12 图形继承 (20 分)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> //定义一个无自身属性，有一个返回值为0.0的求面积方法</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Shape</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;Constructing Shape&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">	   <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span>//继承自<span class="title">Shape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;Constructing Circle&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> radius;<span class="comment">//新定义一个半径</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRadius</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;<span class="comment">// 设置半径</span></span><br><span class="line">		<span class="keyword">this</span>.radius = radius;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getRadius</span><span class="params">()</span> </span>&#123;<span class="comment">// 获取半径</span></span><br><span class="line">		<span class="keyword">return</span> radius;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> Math.PI*radius*radius;<span class="comment">//重写父类的方法</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;Constructing Rectangle&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> width;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> length;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> width;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">double</span> width)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.width = width;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> length;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">double</span> length)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.length = length;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> width*length;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball</span> <span class="keyword">extends</span> <span class="title">Circle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Ball</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;Constructing Ball&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">4.0</span>*<span class="keyword">super</span>.getArea();<span class="comment">//方法的重载，super关键字</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getVolume</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">double</span> r2=getRadius();</span><br><span class="line">		<span class="keyword">return</span> <span class="number">4.0</span>/<span class="number">3.0</span>*r2*r2*r2*Math.PI;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span> <span class="keyword">extends</span> <span class="title">Rectangle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Box</span><span class="params">()</span> </span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;Constructing Box&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> height;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> height;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">double</span> height)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.height = height;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getVolume</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> height*<span class="keyword">super</span>.getArea();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">double</span> w2=getWidth();</span><br><span class="line">		<span class="keyword">double</span> l2=getLength();</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span>*(w2*l2+w2*height+l2*height);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> inType;</span><br><span class="line">		Scanner scanner=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		inType=scanner.nextInt();</span><br><span class="line">		<span class="keyword">switch</span>(inType)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			<span class="keyword">double</span> r=scanner.nextDouble();</span><br><span class="line">			<span class="keyword">if</span>(r&lt;<span class="number">0.0</span>) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;Wrong Format&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				Circle circle=<span class="keyword">new</span> Circle();</span><br><span class="line">				circle.setRadius(r);</span><br><span class="line">				System.out.println(String.format(<span class="string">&quot;Circle&#x27;s area:%.2f&quot;</span>,circle.getArea()));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			<span class="keyword">double</span> width=scanner.nextDouble();</span><br><span class="line">			<span class="keyword">double</span> length=scanner.nextDouble();</span><br><span class="line">			<span class="keyword">if</span>(width&lt;<span class="number">0.0</span>||length&lt;<span class="number">0.0</span>) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;Wrong Format&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				Rectangle rectangle=<span class="keyword">new</span> Rectangle();</span><br><span class="line">				rectangle.setLength(length);</span><br><span class="line">				rectangle.setWidth(width);</span><br><span class="line">				System.out.println(String.format(<span class="string">&quot;Rectangle&#x27;s area:%.2f&quot;</span>,rectangle.getArea()));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			<span class="keyword">double</span> r2=scanner.nextDouble();</span><br><span class="line">			<span class="keyword">if</span>(r2&lt;<span class="number">0.0</span>) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;Wrong Format&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				Ball ball=<span class="keyword">new</span> Ball();</span><br><span class="line">				ball.setRadius(r2);</span><br><span class="line">				System.out.println(String.format(<span class="string">&quot;Ball&#x27;s surface area:%.2f&quot;</span>,ball.getArea()));</span><br><span class="line">				System.out.println(String.format(<span class="string">&quot;Ball&#x27;s volume:%.2f&quot;</span>,ball.getVolume()));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			<span class="keyword">double</span> width2=scanner.nextDouble();</span><br><span class="line">			<span class="keyword">double</span> length2=scanner.nextDouble();</span><br><span class="line">			<span class="keyword">double</span> height=scanner.nextDouble();</span><br><span class="line">			<span class="keyword">if</span>(width2&lt;<span class="number">0.0</span>||length2&lt;<span class="number">0.0</span>||height&lt;<span class="number">0.0</span>) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;Wrong Format&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				Box box=<span class="keyword">new</span> Box();</span><br><span class="line">				box.setHeight(height);</span><br><span class="line">				box.setWidth(width2);</span><br><span class="line">				box.setLength(length2);</span><br><span class="line">				System.out.println(String.format(<span class="string">&quot;Box&#x27;s surface area:%.2f&quot;</span>,box.getArea()));</span><br><span class="line">				System.out.println(String.format(<span class="string">&quot;Box&#x27;s volume:%.2f&quot;</span>,box.getVolume()));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			System.out.println(<span class="string">&quot;Wrong Format&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="7-13-jmu-Java-03面向对象基础-04-形状-继承-15-分"><a href="#7-13-jmu-Java-03面向对象基础-04-形状-继承-15-分" class="headerlink" title="7-13 jmu-Java-03面向对象基础-04-形状-继承 (15 分)"></a>7-13 jmu-Java-03面向对象基础-04-形状-继承 (15 分)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getPerimeter</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> wide, len;</span><br><span class="line"> </span><br><span class="line">	Rectangle(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">		wide = a;</span><br><span class="line">		len = b;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPerimeter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span> * (wide + len);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> wide * len;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;[width=&quot;</span> + wide + <span class="string">&quot;, length=&quot;</span> + len + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> radius;</span><br><span class="line"> </span><br><span class="line">	Circle(<span class="keyword">int</span> _radius) &#123;</span><br><span class="line">		radius = _radius;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPerimeter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> radius * <span class="number">2</span> * PI;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> radius * radius * PI;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;[radius=&quot;</span> + radius + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> n = in.nextInt();</span><br><span class="line">		in.nextLine();</span><br><span class="line">		Shape A[] = <span class="keyword">new</span> Shape[n];</span><br><span class="line">		<span class="keyword">int</span> k = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">double</span> sumAllArea = <span class="number">0</span>, sumAllPerimeter = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			String S = in.next();</span><br><span class="line">			<span class="keyword">if</span> (S.equals(<span class="string">&quot;rect&quot;</span>)) &#123;</span><br><span class="line">				<span class="keyword">int</span> wide = in.nextInt(), len = in.nextInt();</span><br><span class="line">				in.nextLine();</span><br><span class="line">				A[i] = <span class="keyword">new</span> Rectangle(wide, len);</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (S.equals(<span class="string">&quot;cir&quot;</span>)) &#123;</span><br><span class="line">				<span class="keyword">int</span> radius = in.nextInt();</span><br><span class="line">				in.nextLine();</span><br><span class="line">				A[i] = <span class="keyword">new</span> Circle(radius);</span><br><span class="line">			&#125;</span><br><span class="line">			sumAllArea += A[i].getArea();</span><br><span class="line">			sumAllPerimeter += A[i].getPerimeter();</span><br><span class="line">		&#125;</span><br><span class="line"> </span><br><span class="line">		System.out.println(sumAllPerimeter);</span><br><span class="line">		System.out.println(sumAllArea);</span><br><span class="line">		System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i != <span class="number">0</span>)</span><br><span class="line">				System.out.print(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">			<span class="keyword">if</span> (A[i] <span class="keyword">instanceof</span> Rectangle) &#123;</span><br><span class="line">					System.out.print(<span class="string">&quot;Rectangle &quot;</span>);</span><br><span class="line">				System.out.print(A[i].toString());</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.print(<span class="string">&quot;Circle &quot;</span>);</span><br><span class="line">				System.out.print(A[i].toString());	</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"> </span><br><span class="line">		System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line"> </span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(A[i] <span class="keyword">instanceof</span> Rectangle) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;class Rectangle,class Shape&quot;</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;class Circle,class Shape&quot;</span>);</span><br><span class="line"> </span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		in.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="7-15-集体评分2-10-分"><a href="#7-15-集体评分2-10-分" class="headerlink" title="7-15 集体评分2 (10 分)"></a>7-15 集体评分2 (10 分)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">                Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                <span class="keyword">int</span>[] grade = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;grade.length; i++)&#123;</span><br><span class="line">                      grade[i] = in.nextInt();</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br><span class="line">                RR rr = <span class="keyword">new</span> RT(grade);</span><br><span class="line">                <span class="keyword">double</span> dd = rr.mark();</span><br><span class="line">                System.out.printf(<span class="string">&quot;%.2f&quot;</span>,dd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">RR</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">double</span> <span class="title">mark</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RT</span> <span class="keyword">implements</span> <span class="title">RR</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>[] grade;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	   <span class="keyword">double</span> max=<span class="number">0</span>;</span><br><span class="line">	   <span class="keyword">double</span> min=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">	   <span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">	   <span class="keyword">for</span>(<span class="keyword">int</span> i: grade) &#123;</span><br><span class="line">		   sum+=i;</span><br><span class="line">		   <span class="keyword">if</span>(i&gt;max)max=i;</span><br><span class="line">		   <span class="keyword">if</span>(i&lt;min)min=i;</span><br><span class="line">	   &#125;</span><br><span class="line">	   sum-=(max+min);</span><br><span class="line">	   sum/=(<span class="keyword">double</span>)(grade.length-<span class="number">2</span>);</span><br><span class="line">	   <span class="keyword">return</span> sum;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RT</span><span class="params">(<span class="keyword">int</span>[] grade)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.grade = grade;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="7-16-程序改错题2-5-分"><a href="#7-16-程序改错题2-5-分" class="headerlink" title="7-16 程序改错题2 (5 分)"></a>7-16 程序改错题2 (5 分)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog animal = <span class="keyword">new</span> Dog();</span><br><span class="line">        animal.shout();</span><br><span class="line">        animal.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;animal shout！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.shout();</span><br><span class="line">        System.out.println(<span class="string">&quot;wangwang……&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog is running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="7-17-程序填空题3-5-分"><a href="#7-17-程序填空题3-5-分" class="headerlink" title="7-17 程序填空题3 (5 分)"></a>7-17 程序填空题3 (5 分)</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Son son = new Son();</span><br><span class="line">        son.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Parent &#123;</span><br><span class="line">    Parent() &#123;</span><br><span class="line">        System.out.println(&quot;Parent&#x27;s Constructor without parameter&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Parent(boolean b) &#123;</span><br><span class="line">        System.out.println(&quot;Parent&#x27;s Constructor with a boolean parameter&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void method() &#123;</span><br><span class="line">        System.out.println(&quot;Parent&#x27;s method()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Son extends Parent &#123;</span><br><span class="line">    //补全本类定义</span><br><span class="line">	Son()&#123;</span><br><span class="line">		super(true);</span><br><span class="line">		System.out.println(&quot;Son&#x27;s Constructor without parameter&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	public void method() &#123;</span><br><span class="line">//		super.method();</span><br><span class="line">		System.out.println(&quot;Son&#x27;s method()&quot;);</span><br><span class="line">		super.method();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="7-18-接口–四则计算器-10-分"><a href="#7-18-接口–四则计算器-10-分" class="headerlink" title="7-18 接口–四则计算器 (10 分)"></a>7-18 接口–四则计算器 (10 分)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ICompute</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">compute</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Add</span> <span class="keyword">implements</span> <span class="title">ICompute</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compute</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> x+y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">implements</span> <span class="title">ICompute</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compute</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> x-y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       <span class="keyword">int</span> a=in.nextInt(),b=in.nextInt();</span><br><span class="line">       Add x=<span class="keyword">new</span> Add();</span><br><span class="line">       Sub y=<span class="keyword">new</span> Sub();</span><br><span class="line">       System.out.println(x.compute(a,b));</span><br><span class="line">       System.out.println(y.compute(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="7-19-成绩录入时的及格与不及格人数统计-10-分"><a href="#7-19-成绩录入时的及格与不及格人数统计-10-分" class="headerlink" title="7-19 成绩录入时的及格与不及格人数统计 (10 分)"></a>7-19 成绩录入时的及格与不及格人数统计 (10 分)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> n=in.nextInt();</span><br><span class="line">		<span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">			<span class="keyword">int</span> x=in.nextInt();</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(x&gt;<span class="number">100</span>||x&lt;<span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> Exception(x+<span class="string">&quot;invalid!&quot;</span>);</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(x&gt;=<span class="number">60</span>)a++;</span><br><span class="line">				<span class="keyword">else</span> b++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				i--;</span><br><span class="line">				System.out.println(e.getMessage());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(a);</span><br><span class="line">		System.out.println(b);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="7-20-jmu-Java-02基本语法-02-StringBuilder-10-分"><a href="#7-20-jmu-Java-02基本语法-02-StringBuilder-10-分" class="headerlink" title="7-20 jmu-Java-02基本语法-02-StringBuilder (10 分)"></a>7-20 jmu-Java-02基本语法-02-StringBuilder (10 分)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	Scanner in =<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">while</span>(in.hasNextInt()) &#123;</span><br><span class="line">    		<span class="keyword">int</span> n,begin,end;</span><br><span class="line">    		n=in.nextInt();</span><br><span class="line">    		begin=in.nextInt();</span><br><span class="line">    		end=in.nextInt();</span><br><span class="line">    		StringBuilder s =<span class="keyword">new</span> StringBuilder();</span><br><span class="line">    		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">    			s.append(i);</span><br><span class="line">    		&#125;</span><br><span class="line">    		System.out.println(s.substring(begin, end));</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="7-21-单词替换-20-分"><a href="#7-21-单词替换-20-分" class="headerlink" title="7-21 单词替换 (20 分)"></a>7-21 单词替换 (20 分)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">         String s=<span class="keyword">new</span> String(),a,b;</span><br><span class="line">         s=in.nextLine();</span><br><span class="line">         a=in.next();</span><br><span class="line">         b=in.next();</span><br><span class="line">         String[] arr=s.split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">         StringBuilder ans=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">        	 <span class="keyword">if</span>(arr[i].equals(a))ans.append(b);</span><br><span class="line">        	 <span class="keyword">else</span> ans.append(arr[i]);</span><br><span class="line">        	 <span class="keyword">if</span>(i!=arr.length-<span class="number">1</span>)ans.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="7-22-jmu-java-随机数-使用蒙特卡罗法计算圆周率的值-10-分"><a href="#7-22-jmu-java-随机数-使用蒙特卡罗法计算圆周率的值-10-分" class="headerlink" title="7-22 jmu-java-随机数-使用蒙特卡罗法计算圆周率的值 (10 分)"></a>7-22 jmu-java-随机数-使用蒙特卡罗法计算圆周率的值 (10 分)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">long</span> seed = in.nextLong();</span><br><span class="line">        <span class="keyword">int</span> n = in.nextInt();</span><br><span class="line">		Random r = <span class="keyword">new</span> Random(seed);</span><br><span class="line">		<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">			<span class="keyword">double</span> x = r.nextDouble()*<span class="number">2</span>-<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">double</span> y = r.nextDouble()*<span class="number">2</span>-<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> ( x*x + y*y &lt;=<span class="number">1</span>) count++;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="number">4</span>*(<span class="keyword">double</span>)count/n);	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="7-23-通过键盘输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。-10-分"><a href="#7-23-通过键盘输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。-10-分" class="headerlink" title="7-23 通过键盘输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。 (10 分)"></a>7-23 通过键盘输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。 (10 分)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		String str = sc.nextLine();</span><br><span class="line">		sc.close();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">		<span class="keyword">int</span> letter=<span class="number">0</span>,num=<span class="number">0</span>,blank=<span class="number">0</span>,other=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;chars.length;i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>((chars[i]&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; chars[i]&lt;=<span class="string">&#x27;Z&#x27;</span>) || (chars[i]&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; chars[i]&lt;=<span class="string">&#x27;z&#x27;</span>))&#123;</span><br><span class="line">				letter++;</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(chars[i]&gt;=<span class="number">47</span> &amp;&amp; chars[i]&lt;=<span class="number">57</span>) &#123;</span><br><span class="line">				num++;</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>(chars[i]==<span class="number">32</span>) &#123;</span><br><span class="line">				blank++;</span><br><span class="line">			&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">				other++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;字母个数：&quot;</span>+letter);</span><br><span class="line">		System.out.println(<span class="string">&quot;数字个数：&quot;</span>+num);</span><br><span class="line">		System.out.println(<span class="string">&quot;空格个数：&quot;</span>+blank);</span><br><span class="line">		System.out.println(<span class="string">&quot;其他字符个数：&quot;</span>+other);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="7-24-jmu-Java-02基本语法-08-ArrayList入门-10-分"><a href="#7-24-jmu-Java-02基本语法-08-ArrayList入门-10-分" class="headerlink" title="7-24 jmu-Java-02基本语法-08-ArrayList入门 (10 分)"></a>7-24 jmu-Java-02基本语法-08-ArrayList入门 (10 分)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		ArrayList &lt;String&gt; vector=<span class="keyword">new</span> ArrayList&lt;String&gt; ();</span><br><span class="line">		String s;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">			s=in.next();</span><br><span class="line">			<span class="keyword">if</span>(s.equals(<span class="string">&quot;!!end!!&quot;</span>))<span class="keyword">break</span>;</span><br><span class="line">			vector.add(s);</span><br><span class="line">		&#125;</span><br><span class="line">		vector.add(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">		vector.add(<span class="number">0</span>,<span class="string">&quot;begin&quot;</span>);</span><br><span class="line">		System.out.println(vector);</span><br><span class="line">		s=in.next();</span><br><span class="line">		<span class="keyword">if</span>(vector.contains(s))System.out.println(<span class="string">&quot;true&quot;</span>+<span class="string">&quot;\n&quot;</span>+vector.indexOf(s));</span><br><span class="line">		<span class="keyword">else</span> System.out.println(<span class="string">&quot;false&quot;</span>+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">		System.out.println(vector.lastIndexOf(s));</span><br><span class="line">        System.out.println(vector.get(<span class="number">0</span>));</span><br><span class="line">		vector.remove(<span class="number">0</span>);</span><br><span class="line">		System.out.println(vector);</span><br><span class="line">		s=in.next();</span><br><span class="line">		vector.set(<span class="number">1</span>, s);</span><br><span class="line">		System.out.println(vector);</span><br><span class="line">		s=in.next();</span><br><span class="line">		ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">		<span class="keyword">for</span>(String i: vector) &#123;</span><br><span class="line">			<span class="keyword">if</span>(i.contains(s))list.add(i);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(list);</span><br><span class="line">		<span class="keyword">if</span>(vector.contains(s))vector.remove(vector.indexOf(s));</span><br><span class="line">		System.out.println(vector);</span><br><span class="line">		vector.clear();</span><br><span class="line">		System.out.println(vector+<span class="string">&quot;,&quot;</span>+vector.size()+<span class="string">&quot;,&quot;</span>+vector.isEmpty());</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="7-25-找到出勤最多的人-10-分"><a href="#7-25-找到出勤最多的人-10-分" class="headerlink" title="7-25 找到出勤最多的人 (10 分)"></a>7-25 找到出勤最多的人 (10 分)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		Map&lt;String, Integer&gt; ma =<span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">		String s;</span><br><span class="line">		<span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">		ArrayList&lt;String&gt; ans=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">		<span class="keyword">while</span>(in.hasNext()) &#123;</span><br><span class="line">			s=in.next();</span><br><span class="line">			Integer vis=ma.get(s);</span><br><span class="line">			vis=vis==<span class="keyword">null</span>?<span class="number">1</span>:vis+<span class="number">1</span>;</span><br><span class="line">			ma.put(s, vis);</span><br><span class="line">			<span class="keyword">if</span>(vis&gt;max) &#123;</span><br><span class="line">				max=vis;</span><br><span class="line">				ans.clear();</span><br><span class="line">				ans.add(s);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(vis==max) &#123;</span><br><span class="line">				ans.add(s);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> cou=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(String i: ans) &#123;</span><br><span class="line">			cou++;</span><br><span class="line">			System.out.println(i);</span><br><span class="line">			<span class="keyword">if</span>(cou!=ans.size())System.out.println(<span class="string">&quot; &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="7-26-创建一个倒数计数线程-10-分"><a href="#7-26-创建一个倒数计数线程-10-分" class="headerlink" title="7-26 创建一个倒数计数线程 (10 分)"></a>7-26 创建一个倒数计数线程 (10 分)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	Task(<span class="keyword">int</span> n)&#123;</span><br><span class="line">		<span class="keyword">this</span>.n=n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">			<span class="keyword">int</span> time=<span class="number">500</span>;</span><br><span class="line">			<span class="keyword">while</span>(time--&gt;<span class="number">0</span>);</span><br><span class="line">			System.out.println(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">int</span> n = in.nextInt();</span><br><span class="line">		Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Task(n));</span><br><span class="line">        t.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="7-27-程序改错题4-5-分"><a href="#7-27-程序改错题4-5-分" class="headerlink" title="7-27 程序改错题4 (5 分)"></a>7-27 程序改错题4 (5 分)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> RunHandler());</span><br><span class="line">        t.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> x = in.nextInt();</span><br><span class="line">        <span class="keyword">while</span>(x--&gt;<span class="number">0</span>)</span><br><span class="line">            System.out.println(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="7-28-USB接口的定义-10-分"><a href="#7-28-USB接口的定义-10-分" class="headerlink" title="7-28 USB接口的定义 (10 分)"></a>7-28 USB接口的定义 (10 分)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">USB</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">implements</span> <span class="title">USB</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.out.println(<span class="string">&quot;我不能点了&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.out.println(<span class="string">&quot;我点点点&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UPan</span> <span class="keyword">implements</span> <span class="title">USB</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.out.println(<span class="string">&quot;我存存存&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.out.println(<span class="string">&quot;我走了&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       USB usb1 =<span class="keyword">new</span> Mouse();</span><br><span class="line">       usb1.work();</span><br><span class="line">       usb1.stop();</span><br><span class="line">       USB usb[]=<span class="keyword">new</span> USB[<span class="number">6</span>];</span><br><span class="line">       usb[<span class="number">0</span>]=<span class="keyword">new</span> UPan();</span><br><span class="line">       usb[<span class="number">1</span>]=<span class="keyword">new</span> Mouse();</span><br><span class="line">       <span class="keyword">for</span>(USB i: usb) &#123;</span><br><span class="line">    	   i.work();</span><br><span class="line">    	   i.stop();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="7-29-Circle类-10-分"><a href="#7-29-Circle类-10-分" class="headerlink" title="7-29 Circle类 (10 分)"></a>7-29 Circle类 (10 分)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> r;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.r=<span class="number">2</span>;</span><br><span class="line">		System.out.println(<span class="string">&quot;this is a constructor&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(r&lt;=<span class="number">0</span>)<span class="keyword">this</span>.r=<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">this</span>.r=r;</span><br><span class="line">		System.out.println(<span class="string">&quot;this is a constructor with para&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(r&lt;=<span class="number">0</span>) <span class="keyword">this</span>.r=<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">this</span>.r = r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">int</span>)(Math.PI*r*r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Circle [radius=&quot;</span> + r + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		Circle c1 =<span class="keyword">new</span> Circle();</span><br><span class="line">		System.out.println(c1);</span><br><span class="line">		System.out.println(<span class="string">&quot;c1:area=&quot;</span>+c1.getArea());</span><br><span class="line">		Circle c2 = <span class="keyword">new</span> Circle();</span><br><span class="line">		System.out.println(c2);</span><br><span class="line">		<span class="keyword">int</span> r=in.nextInt();</span><br><span class="line">		c2.set(r);</span><br><span class="line">		System.out.println(c2);</span><br><span class="line">		System.out.println(<span class="string">&quot;c2:area=&quot;</span>+c2.getArea());</span><br><span class="line">		Circle c3 =<span class="keyword">new</span> Circle(in.nextInt());</span><br><span class="line">		System.out.println(c3);</span><br><span class="line">		System.out.println(<span class="string">&quot;c3:area=&quot;</span>+c3.getArea());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="7-30-数组与对象-10-分"><a href="#7-30-数组与对象-10-分" class="headerlink" title="7-30 数组与对象 (10 分)"></a>7-30 数组与对象 (10 分)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.omg.PortableInterceptor.NON_EXISTENT;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name=<span class="string">&quot;none&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name=name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="string">&quot;name:&quot;</span>+name; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	Scanner in =<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    	Person a[]=<span class="keyword">new</span> Person[<span class="number">2</span>];</span><br><span class="line">    	a[<span class="number">0</span>]=<span class="keyword">new</span> Person();</span><br><span class="line">    	a[<span class="number">1</span>]=<span class="keyword">new</span> Person(in.next());</span><br><span class="line">    	<span class="keyword">for</span>(Person i: a) &#123;</span><br><span class="line">    		System.out.println(i);</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="7-31-圆柱体类设计-10-分"><a href="#7-31-圆柱体类设计-10-分" class="headerlink" title="7-31 圆柱体类设计 (10 分)"></a>7-31 圆柱体类设计 (10 分)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.omg.PortableInterceptor.NON_EXISTENT;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yz</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> r,h;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Yz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Constructor no para&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Yz</span><span class="params">(<span class="keyword">int</span> r,<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.r=r;</span><br><span class="line">		<span class="keyword">this</span>.h=h;</span><br><span class="line">		System.out.println(<span class="string">&quot;Constructor with para&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getV</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">int</span>)(Math.PI*r*r*h);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getR</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.r = r;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getH</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> h;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setH</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.h = h;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    	<span class="keyword">int</span> r=in.nextInt();</span><br><span class="line">    	<span class="keyword">int</span> h=in.nextInt();</span><br><span class="line">    	Yz c1=<span class="keyword">new</span> Yz(r,h);</span><br><span class="line">    	System.out.println(c1.getV());</span><br><span class="line">    	Yz c2=<span class="keyword">new</span> Yz();</span><br><span class="line">    	System.out.println(c2.getV());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="7-32-List的使用-15-分"><a href="#7-32-List的使用-15-分" class="headerlink" title="7-32 List的使用 (15 分)"></a>7-32 List的使用 (15 分)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.omg.PortableInterceptor.NON_EXISTENT;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	String name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name=name;</span><br><span class="line">		<span class="keyword">this</span>.age=age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Person [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    	List &lt;Person&gt; list =<span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">    	<span class="keyword">int</span> n=in.nextInt();</span><br><span class="line">    	<span class="keyword">while</span>(n--&gt;<span class="number">0</span>) &#123;</span><br><span class="line">    		list.add(<span class="keyword">new</span> Person(in.next(),in.nextInt()));</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">for</span>(Person i: list) &#123;</span><br><span class="line">    		System.out.println(i);</span><br><span class="line">    	&#125;</span><br><span class="line">    	String name=in.next();</span><br><span class="line">    	<span class="keyword">boolean</span> flag=<span class="keyword">true</span>;</span><br><span class="line">    	<span class="keyword">for</span>(Person i: list) &#123;</span><br><span class="line">    		<span class="keyword">if</span>(i.name.equals(name)) &#123;</span><br><span class="line">    			System.out.println(i);</span><br><span class="line">    			flag=<span class="keyword">false</span>;</span><br><span class="line">    			<span class="keyword">break</span>;</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">if</span>(flag) System.out.println(<span class="string">&quot;此人不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="7-33-jmu-Java-03面向对象基础-03-形状-10-分"><a href="#7-33-jmu-Java-03面向对象基础-03-形状-10-分" class="headerlink" title="7-33 jmu-Java-03面向对象基础-03-形状 (10 分)"></a>7-33 jmu-Java-03面向对象基础-03-形状 (10 分)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Rectangle[] rectangle = <span class="keyword">new</span> Rectangle[<span class="number">2</span>];</span><br><span class="line">		Circle[] circle = <span class="keyword">new</span> Circle[<span class="number">2</span>];</span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rectangle.length;i++) &#123;</span><br><span class="line">			rectangle[i] = <span class="keyword">new</span> Rectangle(sc.nextInt(),sc.nextInt());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;circle.length;i++) &#123;</span><br><span class="line">			circle[i] = <span class="keyword">new</span> Circle(sc.nextInt());</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(rectangle[<span class="number">0</span>].getPerimeter()+rectangle[<span class="number">1</span>].getPerimeter()+</span><br><span class="line">				circle[<span class="number">0</span>].getPerimeter()+circle[<span class="number">1</span>].getPerimeter());</span><br><span class="line">		System.out.println(rectangle[<span class="number">0</span>].getArea()+rectangle[<span class="number">1</span>].getArea()+</span><br><span class="line">				circle[<span class="number">0</span>].getArea()+circle[<span class="number">1</span>].getArea());</span><br><span class="line">		System.out.println(Arrays.deepToString(rectangle));</span><br><span class="line">		System.out.println(Arrays.deepToString(circle));</span><br><span class="line">		sc.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">int</span> width,<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.width = width;</span><br><span class="line">		<span class="keyword">this</span>.length = length;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//求周长方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPerimeter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span>*(width+length);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//求面积方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> width*length;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Rectangle [width=&quot;</span> + width + <span class="string">&quot;, length=&quot;</span> + length + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> radius;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">int</span> radius)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.radius = radius;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//求周长方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPerimeter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">int</span>)(<span class="number">2</span>*Math.PI*radius);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//求面积方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">int</span>)(Math.PI*radius*radius);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Circle [radius=&quot;</span> + radius + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>thrift</title>
    <url>/2022/02/25/thrift/</url>
    <content><![CDATA[<h1 id="thrift"><a href="#thrift" class="headerlink" title="thrift"></a>thrift</h1><p><a href="https://thrift.apache.org/">thrift官网</a></p>
<p><a href="https://git.acwing.com/mibbp/thrift">基于thrift实现的匹配机制</a></p>
<p><strong>Thrift</strong>是一种接口描述语言和<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6/361457">二进制</a><a href="https://baike.baidu.com/item/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/5043135">通讯协议</a>，它被用来定义和创建跨语言的<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1/85523">服务</a>。它被当作一个<a href="https://baike.baidu.com/item/%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8/7854346">远程过程调用</a>（RPC）框架来使用，是由<a href="https://baike.baidu.com/item/Facebook">Facebook</a>为“大规模跨语言服务开发”而开发的。</p>
<p>我的理解就是实现服务器之间交互的框架，微服务。</p>
<h3 id="thrift接口框架"><a href="#thrift接口框架" class="headerlink" title="thrift接口框架"></a>thrift接口框架</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	开发基本就是那这个框架改改</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"> * or more contributor license agreements. See the NOTICE file</span></span><br><span class="line"><span class="comment"> * distributed with this work for additional information</span></span><br><span class="line"><span class="comment"> * regarding copyright ownership. The ASF licenses this file</span></span><br><span class="line"><span class="comment"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"> * &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"> * with the License. You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment"> * software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment"> * &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment"> * KIND, either express or implied. See the License for the</span></span><br><span class="line"><span class="comment"> * specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment"> * under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"># Thrift Tutorial</span><br><span class="line"># <span class="function">Mark <span class="title">Slee</span> <span class="params">(mcslee@facebook.com)</span></span></span><br><span class="line"><span class="function">#</span></span><br><span class="line"><span class="function"># This file aims to teach you how to use Thrift, in a .thrift file. Neato. The</span></span><br><span class="line"><span class="function"><span class="meta"># first thing to notice is that .thrift files support standard shell comments.</span></span></span><br><span class="line"><span class="function"># This lets you make your thrift file executable <span class="keyword">and</span> include your Thrift build</span></span><br><span class="line"><span class="function"><span class="meta"># step on the top <span class="meta-keyword">line</span>. And you can place comments like this anywhere you like.</span></span></span><br><span class="line"><span class="function">#</span></span><br><span class="line"><span class="function"># Before running <span class="keyword">this</span> file, you will need to have installed the thrift compiler</span></span><br><span class="line"><span class="function"><span class="meta"># into /usr/local/bin.</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="function"> * The first thing to know about are types. The available types in Thrift are:</span></span></span><br><span class="line"><span class="comment"><span class="function"> *</span></span></span><br><span class="line"><span class="comment"><span class="function"> *  bool        Boolean, one byte</span></span></span><br><span class="line"><span class="comment"><span class="function"> *  i8 (byte)   Signed 8-bit integer</span></span></span><br><span class="line"><span class="comment"><span class="function"> *  i16         Signed 16-bit integer</span></span></span><br><span class="line"><span class="comment"><span class="function"> *  i32         Signed 32-bit integer</span></span></span><br><span class="line"><span class="comment"><span class="function"> *  i64         Signed 64-bit integer</span></span></span><br><span class="line"><span class="comment"><span class="function"> *  double      64-bit floating point value</span></span></span><br><span class="line"><span class="comment"><span class="function"> *  string      String</span></span></span><br><span class="line"><span class="comment"><span class="function"> *  binary      Blob (byte array)</span></span></span><br><span class="line"><span class="comment"><span class="function"> *  map&lt;t1,t2&gt;  Map from one type to another</span></span></span><br><span class="line"><span class="comment"><span class="function"> *  list&lt;t1&gt;    Ordered list of one type</span></span></span><br><span class="line"><span class="comment"><span class="function"> *  set&lt;t1&gt;     Set of unique elements of one type</span></span></span><br><span class="line"><span class="comment"><span class="function"> *</span></span></span><br><span class="line"><span class="comment"><span class="function"> * Did you also notice that Thrift supports C style comments?</span></span></span><br><span class="line"><span class="comment"><span class="function"> */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// Just in case you were wondering... yes. We support simple C comments too.</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="function"> * Thrift files can reference other Thrift files to include common struct</span></span></span><br><span class="line"><span class="comment"><span class="function"> * and service definitions. These are found using the current path, or by</span></span></span><br><span class="line"><span class="comment"><span class="function"> * searching relative to any paths specified with the -I compiler flag.</span></span></span><br><span class="line"><span class="comment"><span class="function"> *</span></span></span><br><span class="line"><span class="comment"><span class="function"> * Included objects are accessed using the name of the .thrift file as a</span></span></span><br><span class="line"><span class="comment"><span class="function"> * prefix. i.e. shared.SharedObject</span></span></span><br><span class="line"><span class="comment"><span class="function"> */</span></span></span><br><span class="line"><span class="function">include &quot;shared.thrift&quot;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="function"> * Thrift files can namespace, package, or prefix their output in various</span></span></span><br><span class="line"><span class="comment"><span class="function"> * target languages.</span></span></span><br><span class="line"><span class="comment"><span class="function"> */</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">namespace</span> cl tutorial</span></span><br><span class="line"><span class="function"><span class="keyword">namespace</span> cpp tutorial</span></span><br><span class="line"><span class="function"><span class="keyword">namespace</span> d tutorial</span></span><br><span class="line"><span class="function"><span class="keyword">namespace</span> dart tutorial</span></span><br><span class="line"><span class="function"><span class="keyword">namespace</span> java tutorial</span></span><br><span class="line"><span class="function"><span class="keyword">namespace</span> php tutorial</span></span><br><span class="line"><span class="function"><span class="keyword">namespace</span> perl tutorial</span></span><br><span class="line"><span class="function"><span class="keyword">namespace</span> haxe tutorial</span></span><br><span class="line"><span class="function"><span class="keyword">namespace</span> netstd tutorial</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="function"> * Thrift lets you do typedefs to get pretty names for your types. Standard</span></span></span><br><span class="line"><span class="comment"><span class="function"> * C style here.</span></span></span><br><span class="line"><span class="comment"><span class="function"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> i32 MyInteger</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="function"> * Thrift also lets you define constants for use across languages. Complex</span></span></span><br><span class="line"><span class="comment"><span class="function"> * types and structs are specified using JSON notation.</span></span></span><br><span class="line"><span class="comment"><span class="function"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">const</span> i32 INT32CONSTANT </span>= <span class="number">9853</span></span><br><span class="line"><span class="keyword">const</span> map&lt;string,string&gt; MAPCONSTANT = &#123;<span class="string">&#x27;hello&#x27;</span>:<span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;goodnight&#x27;</span>:<span class="string">&#x27;moon&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * You can define enums, which are just 32 bit integers. Values are optional</span></span><br><span class="line"><span class="comment"> * and start at 1 if not supplied, C style again.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">enum</span> Operation &#123;</span><br><span class="line">  ADD = <span class="number">1</span>,</span><br><span class="line">  SUBTRACT = <span class="number">2</span>,</span><br><span class="line">  MULTIPLY = <span class="number">3</span>,</span><br><span class="line">  DIVIDE = <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Structs are the basic complex data structures. They are comprised of fields</span></span><br><span class="line"><span class="comment"> * which each have an integer identifier, a type, a symbolic name, and an</span></span><br><span class="line"><span class="comment"> * optional default value.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Fields can be declared &quot;optional&quot;, which ensures they will not be included</span></span><br><span class="line"><span class="comment"> * in the serialized output if they aren&#x27;t set.  Note that this requires some</span></span><br><span class="line"><span class="comment"> * manual management in some languages.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">struct Work &#123;</span><br><span class="line">  <span class="number">1</span>: i32 num1 = <span class="number">0</span>,</span><br><span class="line">  <span class="number">2</span>: i32 num2,</span><br><span class="line">  <span class="number">3</span>: Operation op,</span><br><span class="line">  <span class="number">4</span>: optional string comment,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Structs can also be exceptions, if they are nasty.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">exception InvalidOperation &#123;</span><br><span class="line">  <span class="number">1</span>: i32 whatOp,</span><br><span class="line">  <span class="number">2</span>: string why</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Ahh, now onto the cool part, defining a service. Services just need a name</span></span><br><span class="line"><span class="comment"> * and can optionally inherit from another service using the extends keyword.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">service Calculator extends shared.SharedService &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * A method definition looks like C code. It has a return type, arguments,</span></span><br><span class="line"><span class="comment">   * and optionally a list of exceptions that it may throw. Note that argument</span></span><br><span class="line"><span class="comment">   * lists and exception lists are specified using the exact same syntax as</span></span><br><span class="line"><span class="comment">   * field lists in struct or exception definitions.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">void</span> <span class="built_in">ping</span>(),</span><br><span class="line"></span><br><span class="line">   i32 <span class="built_in">add</span>(<span class="number">1</span>:i32 num1, <span class="number">2</span>:i32 num2),</span><br><span class="line"></span><br><span class="line">   i32 <span class="built_in">calculate</span>(<span class="number">1</span>:i32 logid, <span class="number">2</span>:Work w) <span class="built_in">throws</span> (<span class="number">1</span>:InvalidOperation ouch),</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * This method has a oneway modifier. That means the client only makes</span></span><br><span class="line"><span class="comment">    * a request and does not listen for any response at all. Oneway methods</span></span><br><span class="line"><span class="comment">    * must be void.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   oneway <span class="keyword">void</span> <span class="built_in">zip</span>()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * That just about covers the basics. Take a look in the test/ folder for more</span></span><br><span class="line"><span class="comment"> * detailed examples. After you run this file, your generated code shows up</span></span><br><span class="line"><span class="comment"> * in folders with names gen-&lt;language&gt;. The generated code isn&#x27;t too scary</span></span><br><span class="line"><span class="comment"> * to look at. It even has pretty indentation.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">thrift -r --gen cpp tutorial.thrift <span class="comment">//生成tutorial.thrift和shared.thrift文件</span></span><br></pre></td></tr></table></figure>



<h3 id="Client-客户端"><a href="#Client-客户端" class="headerlink" title="Client(客户端)"></a>Client(客户端)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thrift/protocol/TBinaryProtocol.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thrift/transport/TSocket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thrift/transport/TTransportUtils.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;../gen-cpp/Calculator.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> apache::thrift;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> apache::thrift::protocol;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> apache::thrift::transport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> tutorial;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> shared;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">std::shared_ptr&lt;TTransport&gt; <span class="title">socket</span><span class="params">(<span class="keyword">new</span> TSocket(<span class="string">&quot;localhost&quot;</span>, <span class="number">9090</span>))</span></span>;</span><br><span class="line">  <span class="function">std::shared_ptr&lt;TTransport&gt; <span class="title">transport</span><span class="params">(<span class="keyword">new</span> TBufferedTransport(socket))</span></span>;</span><br><span class="line">  <span class="function">std::shared_ptr&lt;TProtocol&gt; <span class="title">protocol</span><span class="params">(<span class="keyword">new</span> TBinaryProtocol(transport))</span></span>;</span><br><span class="line">  <span class="function">CalculatorClient <span class="title">client</span><span class="params">(protocol)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    transport-&gt;<span class="built_in">open</span>();</span><br><span class="line"></span><br><span class="line">    client.<span class="built_in">ping</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ping()&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1 + 1 = &quot;</span> &lt;&lt; client.<span class="built_in">add</span>(<span class="number">1</span>, <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Work work;</span><br><span class="line">    work.op = Operation::DIVIDE;</span><br><span class="line">    work.num1 = <span class="number">1</span>;</span><br><span class="line">    work.num2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      client.<span class="built_in">calculate</span>(<span class="number">1</span>, work);</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Whoa? We can divide by zero!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="built_in"><span class="keyword">catch</span></span> (InvalidOperation&amp; io) &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;InvalidOperation: &quot;</span> &lt;&lt; io.why &lt;&lt; endl;</span><br><span class="line">      <span class="comment">// or using generated operator&lt;&lt;: cout &lt;&lt; io &lt;&lt; endl;</span></span><br><span class="line">      <span class="comment">// or by using std::exception native method what(): cout &lt;&lt; io.what() &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    work.op = Operation::SUBTRACT;</span><br><span class="line">    work.num1 = <span class="number">15</span>;</span><br><span class="line">    work.num2 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int32_t</span> diff = client.<span class="built_in">calculate</span>(<span class="number">1</span>, work);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;15 - 10 = &quot;</span> &lt;&lt; diff &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Note that C++ uses return by reference for complex types to avoid</span></span><br><span class="line">    <span class="comment">// costly copy construction</span></span><br><span class="line">    SharedStruct ss;</span><br><span class="line">    client.<span class="built_in">getStruct</span>(ss, <span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Received log: &quot;</span> &lt;&lt; ss &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    transport-&gt;<span class="built_in">close</span>();</span><br><span class="line">  &#125; <span class="built_in"><span class="keyword">catch</span></span> (TException&amp; tx) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ERROR: &quot;</span> &lt;&lt; tx.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Server-服务器"><a href="#Server-服务器" class="headerlink" title="Server(服务器)"></a>Server(服务器)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thrift/concurrency/ThreadManager.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thrift/concurrency/ThreadFactory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thrift/protocol/TBinaryProtocol.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thrift/server/TSimpleServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thrift/server/TThreadPoolServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thrift/server/TThreadedServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thrift/transport/TServerSocket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thrift/transport/TSocket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thrift/transport/TTransportUtils.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thrift/TToString.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;../gen-cpp/Calculator.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> apache::thrift;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> apache::thrift::concurrency;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> apache::thrift::protocol;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> apache::thrift::transport;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> apache::thrift::server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> tutorial;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> shared;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalculatorHandler</span> :</span> <span class="keyword">public</span> CalculatorIf &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">CalculatorHandler</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">ping</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;ping()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int32_t</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> n1, <span class="keyword">const</span> <span class="keyword">int32_t</span> n2)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;add(&quot;</span> &lt;&lt; n1 &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; n2 &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> n1 + n2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int32_t</span> <span class="title">calculate</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> logid, <span class="keyword">const</span> Work&amp; work)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;calculate(&quot;</span> &lt;&lt; logid &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; work &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">int32_t</span> val;</span><br><span class="line"></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (work.op) &#123;</span><br><span class="line">    <span class="keyword">case</span> Operation::ADD:</span><br><span class="line">      val = work.num1 + work.num2;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Operation::SUBTRACT:</span><br><span class="line">      val = work.num1 - work.num2;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Operation::MULTIPLY:</span><br><span class="line">      val = work.num1 * work.num2;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> Operation::DIVIDE:</span><br><span class="line">      <span class="keyword">if</span> (work.num2 == <span class="number">0</span>) &#123;</span><br><span class="line">        InvalidOperation io;</span><br><span class="line">        io.whatOp = work.op;</span><br><span class="line">        io.why = <span class="string">&quot;Cannot divide by 0&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> io;</span><br><span class="line">      &#125;</span><br><span class="line">      val = work.num1 / work.num2;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      InvalidOperation io;</span><br><span class="line">      io.whatOp = work.op;</span><br><span class="line">      io.why = <span class="string">&quot;Invalid Operation&quot;</span>;</span><br><span class="line">      <span class="keyword">throw</span> io;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SharedStruct ss;</span><br><span class="line">    ss.key = logid;</span><br><span class="line">    ss.value = <span class="built_in">to_string</span>(val);</span><br><span class="line"></span><br><span class="line">    log[logid] = ss;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">getStruct</span><span class="params">(SharedStruct&amp; ret, <span class="keyword">const</span> <span class="keyword">int32_t</span> logid)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;getStruct(&quot;</span> &lt;&lt; logid &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    ret = log[logid];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">zip</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;zip()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  map&lt;<span class="keyword">int32_t</span>, SharedStruct&gt; log;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  CalculatorIfFactory is code generated.</span></span><br><span class="line"><span class="comment">  CalculatorCloneFactory is useful for getting access to the server side of the</span></span><br><span class="line"><span class="comment">  transport.  It is also useful for making per-connection state.  Without this</span></span><br><span class="line"><span class="comment">  CloneFactory, all connections will end up sharing the same handler instance.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalculatorCloneFactory</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> CalculatorIfFactory &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  ~<span class="built_in">CalculatorCloneFactory</span>() <span class="keyword">override</span> = <span class="keyword">default</span>;</span><br><span class="line">  <span class="function">CalculatorIf* <span class="title">getHandler</span><span class="params">(<span class="keyword">const</span> ::apache::thrift::TConnectionInfo&amp; connInfo)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    std::shared_ptr&lt;TSocket&gt; sock = std::dynamic_pointer_cast&lt;TSocket&gt;(connInfo.transport);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Incoming connection\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\tSocketInfo: &quot;</span>  &lt;&lt; sock-&gt;<span class="built_in">getSocketInfo</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\tPeerHost: &quot;</span>    &lt;&lt; sock-&gt;<span class="built_in">getPeerHost</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\tPeerAddress: &quot;</span> &lt;&lt; sock-&gt;<span class="built_in">getPeerAddress</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\tPeerPort: &quot;</span>    &lt;&lt; sock-&gt;<span class="built_in">getPeerPort</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CalculatorHandler;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">releaseHandler</span><span class="params">( ::shared::SharedServiceIf* handler)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> handler;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">TThreadedServer <span class="title">server</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    std::make_shared&lt;CalculatorProcessorFactory&gt;(std::make_shared&lt;CalculatorCloneFactory&gt;()),</span></span></span><br><span class="line"><span class="params"><span class="function">    std::make_shared&lt;TServerSocket&gt;(<span class="number">9090</span>), <span class="comment">//port</span></span></span></span><br><span class="line"><span class="params"><span class="function">    std::make_shared&lt;TBufferedTransportFactory&gt;(),</span></span></span><br><span class="line"><span class="params"><span class="function">    std::make_shared&lt;TBinaryProtocolFactory&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  // if you don&#x27;t need per-connection state, do the following instead</span></span><br><span class="line"><span class="comment">  TThreadedServer server(</span></span><br><span class="line"><span class="comment">    std::make_shared&lt;CalculatorProcessor&gt;(std::make_shared&lt;CalculatorHandler&gt;()),</span></span><br><span class="line"><span class="comment">    std::make_shared&lt;TServerSocket&gt;(9090), //port</span></span><br><span class="line"><span class="comment">    std::make_shared&lt;TBufferedTransportFactory&gt;(),</span></span><br><span class="line"><span class="comment">    std::make_shared&lt;TBinaryProtocolFactory&gt;());</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Here are some alternate server types...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  // This server only allows one connection at a time, but spawns no threads</span></span><br><span class="line"><span class="comment">  TSimpleServer server(</span></span><br></pre></td></tr></table></figure>

<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">thrift -r --gen py tutorial.thrift <span class="comment">//生成tutorial.thrift和shared.thrift文件</span></span><br></pre></td></tr></table></figure>

<h3 id="Client-客户端-1"><a href="#Client-客户端-1" class="headerlink" title="Client(客户端)"></a>Client(客户端)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line">sys.path.append(<span class="string">&#x27;gen-py&#x27;</span>)</span><br><span class="line">sys.path.insert(<span class="number">0</span>, glob.glob(<span class="string">&#x27;../../lib/py/build/lib*&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tutorial <span class="keyword">import</span> Calculator</span><br><span class="line"><span class="keyword">from</span> tutorial.ttypes <span class="keyword">import</span> InvalidOperation, Operation, Work</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> thrift <span class="keyword">import</span> Thrift</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TSocket</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TTransport</span><br><span class="line"><span class="keyword">from</span> thrift.protocol <span class="keyword">import</span> TBinaryProtocol</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># Make socket</span></span><br><span class="line">    transport = TSocket.TSocket(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">9090</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Buffering is critical. Raw sockets are very slow</span></span><br><span class="line">    transport = TTransport.TBufferedTransport(transport)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Wrap in a protocol</span></span><br><span class="line">    protocol = TBinaryProtocol.TBinaryProtocol(transport)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create a client to use the protocol encoder</span></span><br><span class="line">    client = Calculator.Client(protocol)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Connect!</span></span><br><span class="line">    transport.<span class="built_in">open</span>()</span><br><span class="line"></span><br><span class="line">    client.ping()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ping()&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    sum_ = client.add(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;1+1=%d&#x27;</span> % sum_)</span><br><span class="line"></span><br><span class="line">    work = Work()</span><br><span class="line"></span><br><span class="line">    work.op = Operation.DIVIDE</span><br><span class="line">    work.num1 = <span class="number">1</span></span><br><span class="line">    work.num2 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        quotient = client.calculate(<span class="number">1</span>, work)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Whoa? You know how to divide by zero?&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;FYI the answer is %d&#x27;</span> % quotient)</span><br><span class="line">    <span class="keyword">except</span> InvalidOperation <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;InvalidOperation: %r&#x27;</span> % e)</span><br><span class="line"></span><br><span class="line">    work.op = Operation.SUBTRACT</span><br><span class="line">    work.num1 = <span class="number">15</span></span><br><span class="line">    work.num2 = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    diff = client.calculate(<span class="number">1</span>, work)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;15-10=%d&#x27;</span> % diff)</span><br><span class="line"></span><br><span class="line">    log = client.getStruct(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Check log: %s&#x27;</span> % log.value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Close!</span></span><br><span class="line">    transport.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Server（服务器）"><a href="#Server（服务器）" class="headerlink" title="Server（服务器）"></a>Server（服务器）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&#x27;gen-py&#x27;</span>)</span><br><span class="line">sys.path.insert(<span class="number">0</span>, glob.glob(<span class="string">&#x27;../../lib/py/build/lib*&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tutorial <span class="keyword">import</span> Calculator</span><br><span class="line"><span class="keyword">from</span> tutorial.ttypes <span class="keyword">import</span> InvalidOperation, Operation</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> shared.ttypes <span class="keyword">import</span> SharedStruct</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TSocket</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TTransport</span><br><span class="line"><span class="keyword">from</span> thrift.protocol <span class="keyword">import</span> TBinaryProtocol</span><br><span class="line"><span class="keyword">from</span> thrift.server <span class="keyword">import</span> TServer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CalculatorHandler</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.log = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ping</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ping()&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self, n1, n2</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;add(%d,%d)&#x27;</span> % (n1, n2))</span><br><span class="line">        <span class="keyword">return</span> n1 + n2</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">self, logid, work</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;calculate(%d, %r)&#x27;</span> % (logid, work))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> work.op == Operation.ADD:</span><br><span class="line">            val = work.num1 + work.num2</span><br><span class="line">        <span class="keyword">elif</span> work.op == Operation.SUBTRACT:</span><br><span class="line">            val = work.num1 - work.num2</span><br><span class="line">        <span class="keyword">elif</span> work.op == Operation.MULTIPLY:</span><br><span class="line">            val = work.num1 * work.num2</span><br><span class="line">        <span class="keyword">elif</span> work.op == Operation.DIVIDE:</span><br><span class="line">            <span class="keyword">if</span> work.num2 == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> InvalidOperation(work.op, <span class="string">&#x27;Cannot divide by 0&#x27;</span>)</span><br><span class="line">            val = work.num1 / work.num2</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> InvalidOperation(work.op, <span class="string">&#x27;Invalid operation&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        log = SharedStruct()</span><br><span class="line">        log.key = logid</span><br><span class="line">        log.value = <span class="string">&#x27;%d&#x27;</span> % (val)</span><br><span class="line">        self.log[logid] = log</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getStruct</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;getStruct(%d)&#x27;</span> % (key))</span><br><span class="line">        <span class="keyword">return</span> self.log[key]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">zip</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;zip()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    handler = CalculatorHandler()</span><br><span class="line">    processor = Calculator.Processor(handler)</span><br><span class="line">    transport = TSocket.TServerSocket(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">9090</span>)</span><br><span class="line">    tfactory = TTransport.TBufferedTransportFactory()</span><br><span class="line">    pfactory = TBinaryProtocol.TBinaryProtocolFactory()</span><br><span class="line"></span><br><span class="line">    server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># You could do one of these for a multithreaded server</span></span><br><span class="line">    <span class="comment"># server = TServer.TThreadedServer(</span></span><br><span class="line">    <span class="comment">#     processor, transport, tfactory, pfactory)</span></span><br><span class="line">    <span class="comment"># server = TServer.TThreadPoolServer(</span></span><br><span class="line">    <span class="comment">#     processor, transport, tfactory, pfactory)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Starting the server...&#x27;</span>)</span><br><span class="line">    server.serve()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;done.&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">thrift -r --gen java tutorial.thrift <span class="comment">//生成tutorial.thrift和shared.thrift文件</span></span><br></pre></td></tr></table></figure>



<h3 id="Clien（客户端）"><a href="#Clien（客户端）" class="headerlink" title="Clien（客户端）"></a>Clien（客户端）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"> * or more contributor license agreements. See the NOTICE file</span></span><br><span class="line"><span class="comment"> * distributed with this work for additional information</span></span><br><span class="line"><span class="comment"> * regarding copyright ownership. The ASF licenses this file</span></span><br><span class="line"><span class="comment"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"> * &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"> * with the License. You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment"> * software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment"> * &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment"> * KIND, either express or implied. See the License for the</span></span><br><span class="line"><span class="comment"> * specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment"> * under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Generated code</span></span><br><span class="line"><span class="keyword">import</span> tutorial.*;</span><br><span class="line"><span class="keyword">import</span> shared.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.TException;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.transport.TSSLTransportFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.transport.TTransport;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.transport.TSocket;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.protocol.TBinaryProtocol;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.protocol.TProtocol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaClient</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (args.length != <span class="number">1</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Please enter &#x27;simple&#x27; or &#x27;secure&#x27;&quot;</span>);</span><br><span class="line">      System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      TTransport transport;</span><br><span class="line">      <span class="keyword">if</span> (args[<span class="number">0</span>].contains(<span class="string">&quot;simple&quot;</span>)) &#123;</span><br><span class="line">        transport = <span class="keyword">new</span> TSocket(<span class="string">&quot;localhost&quot;</span>, <span class="number">9090</span>);</span><br><span class="line">        transport.open();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Similar to the server, you can use the parameters to setup client parameters or</span></span><br><span class="line"><span class="comment">         * use the default settings. On the client side, you will need a TrustStore which</span></span><br><span class="line"><span class="comment">         * contains the trusted certificate along with the public key. </span></span><br><span class="line"><span class="comment">         * For this example it&#x27;s a self-signed cert. </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        TSSLTransportParameters params = <span class="keyword">new</span> TSSLTransportParameters();</span><br><span class="line">        params.setTrustStore(<span class="string">&quot;../../lib/java/test/.truststore&quot;</span>, <span class="string">&quot;thrift&quot;</span>, <span class="string">&quot;SunX509&quot;</span>, <span class="string">&quot;JKS&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Get a client transport instead of a server transport. The connection is opened on</span></span><br><span class="line"><span class="comment">         * invocation of the factory method, no need to specifically call open()</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        transport = TSSLTransportFactory.getClientSocket(<span class="string">&quot;localhost&quot;</span>, <span class="number">9091</span>, <span class="number">0</span>, params);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      TProtocol protocol = <span class="keyword">new</span>  TBinaryProtocol(transport);</span><br><span class="line">      Calculator.Client client = <span class="keyword">new</span> Calculator.Client(protocol);</span><br><span class="line"></span><br><span class="line">      perform(client);</span><br><span class="line"></span><br><span class="line">      transport.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TException x) &#123;</span><br><span class="line">      x.printStackTrace();</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">perform</span><span class="params">(Calculator.Client client)</span> <span class="keyword">throws</span> TException</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    client.ping();</span><br><span class="line">    System.out.println(<span class="string">&quot;ping()&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sum = client.add(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;1+1=&quot;</span> + sum);</span><br><span class="line"></span><br><span class="line">    Work work = <span class="keyword">new</span> Work();</span><br><span class="line"></span><br><span class="line">    work.op = Operation.DIVIDE;</span><br><span class="line">    work.num1 = <span class="number">1</span>;</span><br><span class="line">    work.num2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">int</span> quotient = client.calculate(<span class="number">1</span>, work);</span><br><span class="line">      System.out.println(<span class="string">&quot;Whoa we can divide by 0&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvalidOperation io) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Invalid operation: &quot;</span> + io.why);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    work.op = Operation.SUBTRACT;</span><br><span class="line">    work.num1 = <span class="number">15</span>;</span><br><span class="line">    work.num2 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">int</span> diff = client.calculate(<span class="number">1</span>, work);</span><br><span class="line">      System.out.println(<span class="string">&quot;15-10=&quot;</span> + diff);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvalidOperation io) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Invalid operation: &quot;</span> + io.why);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SharedStruct log = client.getStruct(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;Check log: &quot;</span> + log.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CalculatorHandler（计算机处理程序）"><a href="#CalculatorHandler（计算机处理程序）" class="headerlink" title="CalculatorHandler（计算机处理程序）"></a>CalculatorHandler（计算机处理程序）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"> * or more contributor license agreements. See the NOTICE file</span></span><br><span class="line"><span class="comment"> * distributed with this work for additional information</span></span><br><span class="line"><span class="comment"> * regarding copyright ownership. The ASF licenses this file</span></span><br><span class="line"><span class="comment"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"> * &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"> * with the License. You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment"> * software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment"> * &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment"> * KIND, either express or implied. See the License for the</span></span><br><span class="line"><span class="comment"> * specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment"> * under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.TException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generated code</span></span><br><span class="line"><span class="keyword">import</span> tutorial.*;</span><br><span class="line"><span class="keyword">import</span> shared.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorHandler</span> <span class="keyword">implements</span> <span class="title">Calculator</span>.<span class="title">Iface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> HashMap&lt;Integer,SharedStruct&gt; log;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CalculatorHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log = <span class="keyword">new</span> HashMap&lt;Integer, SharedStruct&gt;();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;ping()&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;add(&quot;</span> + n1 + <span class="string">&quot;,&quot;</span> + n2 + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> n1 + n2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> logid, Work work)</span> <span class="keyword">throws</span> InvalidOperation </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;calculate(&quot;</span> + logid + <span class="string">&quot;, &#123;&quot;</span> + work.op + <span class="string">&quot;,&quot;</span> + work.num1 + <span class="string">&quot;,&quot;</span> + work.num2 + <span class="string">&quot;&#125;)&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (work.op) &#123;</span><br><span class="line">    <span class="keyword">case</span> ADD:</span><br><span class="line">      val = work.num1 + work.num2;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SUBTRACT:</span><br><span class="line">      val = work.num1 - work.num2;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> MULTIPLY:</span><br><span class="line">      val = work.num1 * work.num2;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DIVIDE:</span><br><span class="line">      <span class="keyword">if</span> (work.num2 == <span class="number">0</span>) &#123;</span><br><span class="line">        InvalidOperation io = <span class="keyword">new</span> InvalidOperation();</span><br><span class="line">        io.whatOp = work.op.getValue();</span><br><span class="line">        io.why = <span class="string">&quot;Cannot divide by 0&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> io;</span><br><span class="line">      &#125;</span><br><span class="line">      val = work.num1 / work.num2;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      InvalidOperation io = <span class="keyword">new</span> InvalidOperation();</span><br><span class="line">      io.whatOp = work.op.getValue();</span><br><span class="line">      io.why = <span class="string">&quot;Unknown operation&quot;</span>;</span><br><span class="line">      <span class="keyword">throw</span> io;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SharedStruct entry = <span class="keyword">new</span> SharedStruct();</span><br><span class="line">    entry.key = logid;</span><br><span class="line">    entry.value = Integer.toString(val);</span><br><span class="line">    log.put(logid, entry);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SharedStruct <span class="title">getStruct</span><span class="params">(<span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;getStruct(&quot;</span> + key + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> log.get(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;zip()&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Server（服务器）-1"><a href="#Server（服务器）-1" class="headerlink" title="Server（服务器）"></a>Server（服务器）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"> * or more contributor license agreements. See the NOTICE file</span></span><br><span class="line"><span class="comment"> * distributed with this work for additional information</span></span><br><span class="line"><span class="comment"> * regarding copyright ownership. The ASF licenses this file</span></span><br><span class="line"><span class="comment"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"> * &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"> * with the License. You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment"> * software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment"> * &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment"> * KIND, either express or implied. See the License for the</span></span><br><span class="line"><span class="comment"> * specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment"> * under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.server.TServer;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.server.TServer.Args;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.server.TSimpleServer;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.server.TThreadPoolServer;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.transport.TSSLTransportFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.transport.TServerSocket;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.transport.TServerTransport;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.transport.TSSLTransportFactory.TSSLTransportParameters;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generated code</span></span><br><span class="line"><span class="keyword">import</span> tutorial.*;</span><br><span class="line"><span class="keyword">import</span> shared.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> CalculatorHandler handler;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Calculator.Processor processor;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      handler = <span class="keyword">new</span> CalculatorHandler();</span><br><span class="line">      processor = <span class="keyword">new</span> Calculator.Processor(handler);</span><br><span class="line"></span><br><span class="line">      Runnable simple = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          simple(processor);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;      </span><br><span class="line">      Runnable secure = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          secure(processor);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">new</span> Thread(simple).start();</span><br><span class="line">      <span class="keyword">new</span> Thread(secure).start();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception x) &#123;</span><br><span class="line">      x.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">simple</span><span class="params">(Calculator.Processor processor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      TServerTransport serverTransport = <span class="keyword">new</span> TServerSocket(<span class="number">9090</span>);</span><br><span class="line">      TServer server = <span class="keyword">new</span> TSimpleServer(<span class="keyword">new</span> Args(serverTransport).processor(processor));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Use this for a multithreaded server</span></span><br><span class="line">      <span class="comment">// TServer server = new TThreadPoolServer(new TThreadPoolServer.Args(serverTransport).processor(processor));</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;Starting the simple server...&quot;</span>);</span><br><span class="line">      server.serve();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">secure</span><span class="params">(Calculator.Processor processor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * Use TSSLTransportParameters to setup the required SSL parameters. In this example</span></span><br><span class="line"><span class="comment">       * we are setting the keystore and the keystore password. Other things like algorithms,</span></span><br><span class="line"><span class="comment">       * cipher suites, client auth etc can be set. </span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      TSSLTransportParameters params = <span class="keyword">new</span> TSSLTransportParameters();</span><br><span class="line">      <span class="comment">// The Keystore contains the private key</span></span><br><span class="line">      params.setKeyStore(<span class="string">&quot;../../lib/java/test/.keystore&quot;</span>, <span class="string">&quot;thrift&quot;</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * Use any of the TSSLTransportFactory to get a server transport with the appropriate</span></span><br><span class="line"><span class="comment">       * SSL configuration. You can use the default settings if properties are set in the command line.</span></span><br><span class="line"><span class="comment">       * Ex: -Djavax.net.ssl.keyStore=.keystore and -Djavax.net.ssl.keyStorePassword=thrift</span></span><br><span class="line"><span class="comment">       * </span></span><br><span class="line"><span class="comment">       * Note: You need not explicitly call open(). The underlying server socket is bound on return</span></span><br><span class="line"><span class="comment">       * from the factory class. </span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      TServerTransport serverTransport = TSSLTransportFactory.getServerSocket(<span class="number">9091</span>, <span class="number">0</span>, <span class="keyword">null</span>, params);</span><br><span class="line">      TServer server = <span class="keyword">new</span> TSimpleServer(<span class="keyword">new</span> Args(serverTransport).processor(processor));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Use this for a multi threaded server</span></span><br><span class="line">      <span class="comment">// TServer server = new TThreadPoolServer(new TThreadPoolServer.Args(serverTransport).processor(processor));</span></span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">&quot;Starting the secure server...&quot;</span>);</span><br><span class="line">      server.serve();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">thrift -r --gen go tutorial.thrift<span class="comment">//生成tutorial.thrift和shared.thrift文件</span></span><br></pre></td></tr></table></figure>

<h3 id="Client（客户端）"><a href="#Client（客户端）" class="headerlink" title="Client（客户端）"></a>Client（客户端）</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/apache/thrift/lib/go/thrift&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/apache/thrift/tutorial/go/gen-go/tutorial&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> defaultCtx = context.Background()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleClient</span><span class="params">(client *tutorial.CalculatorClient)</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">	client.Ping(defaultCtx)</span><br><span class="line">	fmt.Println(<span class="string">&quot;ping()&quot;</span>)</span><br><span class="line"></span><br><span class="line">	sum, _ := client.Add(defaultCtx, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">	fmt.Print(<span class="string">&quot;1+1=&quot;</span>, sum, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">	work := tutorial.NewWork()</span><br><span class="line">	work.Op = tutorial.Operation_DIVIDE</span><br><span class="line">	work.Num1 = <span class="number">1</span></span><br><span class="line">	work.Num2 = <span class="number">0</span></span><br><span class="line">	quotient, err := client.Calculate(defaultCtx, <span class="number">1</span>, work)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">switch</span> v := err.(<span class="keyword">type</span>) &#123;</span><br><span class="line">		<span class="keyword">case</span> *tutorial.InvalidOperation:</span><br><span class="line">			fmt.Println(<span class="string">&quot;Invalid operation:&quot;</span>, v)</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Println(<span class="string">&quot;Error during operation:&quot;</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Whoa we can divide by 0 with new value:&quot;</span>, quotient)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	work.Op = tutorial.Operation_SUBTRACT</span><br><span class="line">	work.Num1 = <span class="number">15</span></span><br><span class="line">	work.Num2 = <span class="number">10</span></span><br><span class="line">	diff, err := client.Calculate(defaultCtx, <span class="number">1</span>, work)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">switch</span> v := err.(<span class="keyword">type</span>) &#123;</span><br><span class="line">		<span class="keyword">case</span> *tutorial.InvalidOperation:</span><br><span class="line">			fmt.Println(<span class="string">&quot;Invalid operation:&quot;</span>, v)</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Println(<span class="string">&quot;Error during operation:&quot;</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Print(<span class="string">&quot;15-10=&quot;</span>, diff, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	log, err := client.GetStruct(defaultCtx, <span class="number">1</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Unable to get struct:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Check log:&quot;</span>, log.Value)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runClient</span><span class="params">(transportFactory thrift.TTransportFactory, protocolFactory thrift.TProtocolFactory, addr <span class="keyword">string</span>, secure <span class="keyword">bool</span>, cfg *thrift.TConfiguration)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> transport thrift.TTransport</span><br><span class="line">	<span class="keyword">if</span> secure &#123;</span><br><span class="line">		transport = thrift.NewTSSLSocketConf(addr, cfg)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		transport = thrift.NewTSocketConf(addr, cfg)</span><br><span class="line">	&#125;</span><br><span class="line">	transport, err := transportFactory.GetTransport(transport)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> transport.Close()</span><br><span class="line">	<span class="keyword">if</span> err := transport.Open(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	iprot := protocolFactory.GetProtocol(transport)</span><br><span class="line">	oprot := protocolFactory.GetProtocol(transport)</span><br><span class="line">	<span class="keyword">return</span> handleClient(tutorial.NewCalculatorClient(thrift.NewTStandardClient(iprot, oprot)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Server（服务器）-2"><a href="#Server（服务器）-2" class="headerlink" title="Server（服务器）"></a>Server（服务器）</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;crypto/tls&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/apache/thrift/lib/go/thrift&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/apache/thrift/tutorial/go/gen-go/tutorial&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">runServer</span><span class="params">(transportFactory thrift.TTransportFactory, protocolFactory thrift.TProtocolFactory, addr <span class="keyword">string</span>, secure <span class="keyword">bool</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> transport thrift.TServerTransport</span><br><span class="line">	<span class="keyword">var</span> err error</span><br><span class="line">	<span class="keyword">if</span> secure &#123;</span><br><span class="line">		cfg := <span class="built_in">new</span>(tls.Config)</span><br><span class="line">		<span class="keyword">if</span> cert, err := tls.LoadX509KeyPair(<span class="string">&quot;server.crt&quot;</span>, <span class="string">&quot;server.key&quot;</span>); err == <span class="literal">nil</span> &#123;</span><br><span class="line">			cfg.Certificates = <span class="built_in">append</span>(cfg.Certificates, cert)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> err</span><br><span class="line">		&#125;</span><br><span class="line">		transport, err = thrift.NewTSSLServerSocket(addr, cfg)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		transport, err = thrift.NewTServerSocket(addr)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, transport)</span><br><span class="line">	handler := NewCalculatorHandler()</span><br><span class="line">	processor := tutorial.NewCalculatorProcessor(handler)</span><br><span class="line">	server := thrift.NewTSimpleServer4(processor, transport, transportFactory, protocolFactory)</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;Starting the simple server... on &quot;</span>, addr)</span><br><span class="line">	<span class="keyword">return</span> server.Serve()</span><br><span class="line">This snippet was generated by Apache Thrift<span class="string">&#x27;s source tree docs: tutorial/go/src/server.go</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Server Handler</span></span><br><span class="line"><span class="string">import (</span></span><br><span class="line"><span class="string">	&quot;context&quot;</span></span><br><span class="line"><span class="string">	&quot;fmt&quot;</span></span><br><span class="line"><span class="string">	&quot;strconv&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	&quot;github.com/apache/thrift/tutorial/go/gen-go/shared&quot;</span></span><br><span class="line"><span class="string">	&quot;github.com/apache/thrift/tutorial/go/gen-go/tutorial&quot;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">type CalculatorHandler struct &#123;</span></span><br><span class="line"><span class="string">	log map[int]*shared.SharedStruct</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func NewCalculatorHandler() *CalculatorHandler &#123;</span></span><br><span class="line"><span class="string">	return &amp;CalculatorHandler&#123;log: make(map[int]*shared.SharedStruct)&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func (p *CalculatorHandler) Ping(ctx context.Context) (err error) &#123;</span></span><br><span class="line"><span class="string">	fmt.Print(&quot;ping()\n&quot;)</span></span><br><span class="line"><span class="string">	return nil</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func (p *CalculatorHandler) Add(ctx context.Context, num1 int32, num2 int32) (retval17 int32, err error) &#123;</span></span><br><span class="line"><span class="string">	fmt.Print(&quot;add(&quot;, num1, &quot;,&quot;, num2, &quot;)\n&quot;)</span></span><br><span class="line"><span class="string">	return num1 + num2, nil</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func (p *CalculatorHandler) Calculate(ctx context.Context, logid int32, w *tutorial.Work) (val int32, err error) &#123;</span></span><br><span class="line"><span class="string">	fmt.Print(&quot;calculate(&quot;, logid, &quot;, &#123;&quot;, w.Op, &quot;,&quot;, w.Num1, &quot;,&quot;, w.Num2, &quot;&#125;)\n&quot;)</span></span><br><span class="line"><span class="string">	switch w.Op &#123;</span></span><br><span class="line"><span class="string">	case tutorial.Operation_ADD:</span></span><br><span class="line"><span class="string">		val = w.Num1 + w.Num2</span></span><br><span class="line"><span class="string">	case tutorial.Operation_SUBTRACT:</span></span><br><span class="line"><span class="string">		val = w.Num1 - w.Num2</span></span><br><span class="line"><span class="string">	case tutorial.Operation_MULTIPLY:</span></span><br><span class="line"><span class="string">		val = w.Num1 * w.Num2</span></span><br><span class="line"><span class="string">	case tutorial.Operation_DIVIDE:</span></span><br><span class="line"><span class="string">		if w.Num2 == 0 &#123;</span></span><br><span class="line"><span class="string">			ouch := tutorial.NewInvalidOperation()</span></span><br><span class="line"><span class="string">			ouch.WhatOp = int32(w.Op)</span></span><br><span class="line"><span class="string">			ouch.Why = &quot;Cannot divide by 0&quot;</span></span><br><span class="line"><span class="string">			err = ouch</span></span><br><span class="line"><span class="string">			return</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		val = w.Num1 / w.Num2</span></span><br><span class="line"><span class="string">	default:</span></span><br><span class="line"><span class="string">		ouch := tutorial.NewInvalidOperation()</span></span><br><span class="line"><span class="string">		ouch.WhatOp = int32(w.Op)</span></span><br><span class="line"><span class="string">		ouch.Why = &quot;Unknown operation&quot;</span></span><br><span class="line"><span class="string">		err = ouch</span></span><br><span class="line"><span class="string">		return</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	entry := shared.NewSharedStruct()</span></span><br><span class="line"><span class="string">	entry.Key = logid</span></span><br><span class="line"><span class="string">	entry.Value = strconv.Itoa(int(val))</span></span><br><span class="line"><span class="string">	k := int(logid)</span></span><br><span class="line"><span class="string">	/*</span></span><br><span class="line"><span class="string">	   oldvalue, exists := p.log[k]</span></span><br><span class="line"><span class="string">	   if exists &#123;</span></span><br><span class="line"><span class="string">	     fmt.Print(&quot;Replacing &quot;, oldvalue, &quot; with &quot;, entry, &quot; for key &quot;, k, &quot;\n&quot;)</span></span><br><span class="line"><span class="string">	   &#125; else &#123;</span></span><br><span class="line"><span class="string">	     fmt.Print(&quot;Adding &quot;, entry, &quot; for key &quot;, k, &quot;\n&quot;)</span></span><br><span class="line"><span class="string">	   &#125;</span></span><br><span class="line"><span class="string">	*/</span></span><br><span class="line"><span class="string">	p.log[k] = entry</span></span><br><span class="line"><span class="string">	return val, err</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func (p *CalculatorHandler) GetStruct(ctx context.Context, key int32) (*shared.SharedStruct, error) &#123;</span></span><br><span class="line"><span class="string">	fmt.Print(&quot;getStruct(&quot;, key, &quot;)\n&quot;)</span></span><br><span class="line"><span class="string">	v := p.log[int(key)]</span></span><br><span class="line"><span class="string">	return v, nil</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func (p *CalculatorHandler) Zip(ctx context.Context) (err error) &#123;</span></span><br><span class="line"><span class="string">	fmt.Print(&quot;zip()\n&quot;)</span></span><br><span class="line"><span class="string">	return nil</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>计算机图形学实验三 《交互式绘制多边形》</title>
    <url>/2022/03/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%AE%9E%E9%AA%8C%E4%B8%89%20%E3%80%8A%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%BB%98%E5%88%B6%E5%A4%9A%E8%BE%B9%E5%BD%A2%E3%80%8B/</url>
    <content><![CDATA[<h1 id="计算机图形学实验三-《交互式绘制多边形》"><a href="#计算机图形学实验三-《交互式绘制多边形》" class="headerlink" title="计算机图形学实验三 《交互式绘制多边形》"></a>计算机图形学实验三 《交互式绘制多边形》</h1><h2 id="这个只是先行版，最近比赛太多了有点忙不过来，讲得不好还请包含"><a href="#这个只是先行版，最近比赛太多了有点忙不过来，讲得不好还请包含" class="headerlink" title="这个只是先行版，最近比赛太多了有点忙不过来，讲得不好还请包含"></a>这个只是先行版，最近比赛太多了有点忙不过来，讲得不好还请包含</h2><h3 id="视频讲解：咕咕咕"><a href="#视频讲解：咕咕咕" class="headerlink" title="视频讲解：咕咕咕~"></a>视频讲解：咕咕咕~</h3><h2 id="一-交互式技术"><a href="#一-交互式技术" class="headerlink" title="一.交互式技术"></a>一.交互式技术</h2><p>人机交互就是指人与计算机之间使用某种对话语言，以一定的交互方式，为完成确定任务的人与计算机之间的信息交换过程。</p>
<h3 id="1-消息响应函数"><a href="#1-消息响应函数" class="headerlink" title="1.消息响应函数"></a>1.消息响应函数</h3><p>消息响应函数就是收到某些指定消息的时候，做出某些动作的函数，也叫消息处理函数。</p>
<p>有两种方法去添加消息响应函数一种是用户手动添加两个文件（（.h）和 (.cpp)）的内容，</p>
<p>一种就是用MFC自带的这里只说自带的且常用的。</p>
<p>消息响应函数有很多这里介绍常用的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">WM_LBUTTONDOWN<span class="comment">//鼠标按下左键的消息</span></span><br><span class="line">WM_LBUTTONUP<span class="comment">//鼠标左键弹起的消息</span></span><br><span class="line"><span class="comment">//有左键就有右键和上面一样就是L换成R</span></span><br><span class="line">WM_MOUSEMOVE<span class="comment">//鼠标移动消息</span></span><br><span class="line"><span class="comment">//WM就是windows message的意思简单地说就比如第一个就是当你鼠标按下左键的时候</span></span><br><span class="line"><span class="comment">//就会做出对应的响应</span></span><br></pre></td></tr></table></figure>

<p>接下来说一下如何添加</p>
<p><img src="C:\Users\mibbp\AppData\Roaming\Typora\typora-user-images\image-20220321204512541.png" alt="image-20220321204512541"></p>
<p>点击类向导然后<img src="C:\Users\mibbp\AppData\Roaming\Typora\typora-user-images\image-20220321204615368.png" alt="image-20220321204615368"></p>
<p>类名切换成你的View类如果你的项目叫Test那这个就是TestView类，然后点击消息，在那个搜索消息框里面搜索要添加的函数，点击之后右边现有处理程序框就会显示，然后点确定就好了。</p>
<p>以按下左键消息函数为例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CInteractionView::OnLButtonDown</span><span class="params">(UINT nFlags, CPoint point)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line">	CDC* pDC=<span class="built_in">GetDC</span>();</span><br><span class="line">	pDC-&gt;<span class="built_in">LineTo</span>(point);</span><br><span class="line">	CView::<span class="built_in">OnLButtonDown</span>(nFlags, point);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>这样写的意思就是当你按下左键的时候就会画一条直线，左键弹起就会小时，因为必须的按下左键才会显示导致我没法截图你们可以自己试试。</p>
<h3 id="2-橡皮筋"><a href="#2-橡皮筋" class="headerlink" title="2.橡皮筋"></a>2.橡皮筋</h3><p><video controls width="600" controls src="D:\Wondershare\FilmoraCN_Data\Recorded\VID_20220321_205431.mp4"></video></p>
<p>这是我们想实现的结果，就是交互式的绘制多边形，大概思路就是用MouseMove(鼠标移动消息响应函数)去实现随着鼠标移动线向橡皮筋一样去实时的绘制，然后按下左键去确定点。</p>
<p>先看MouseMove</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CInteractionView::OnMouseMove</span><span class="params">(UINT nFlags, CPoint point)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line">	CDC* pDC = <span class="built_in">GetDC</span>();</span><br><span class="line">	pDC-&gt;<span class="built_in">LineTo</span>(point);</span><br><span class="line">	</span><br><span class="line">	CView::<span class="built_in">OnMouseMove</span>(nFlags, point);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这么写的意思就是移动到那线就画到哪那他就会这样</p>
<p><video controls width="600" controls src="D:\Wondershare\FilmoraCN_Data\Recorded\VID_20220321_210459.mp4"></video></p>
<p>你会发现之前的线还在残留且不连续，假如你写个代码就绘制一条线那也会出现屏闪的情况</p>
<p><video controls width="600" controls src="D:\Wondershare\FilmoraCN_Data\Recorded\VID_20220321_212150.mp4"></video></p>
<p>所以这里我们引入双缓冲技术</p>
<h4 id="双缓冲"><a href="#双缓冲" class="headerlink" title="双缓冲"></a>双缓冲</h4><p>双缓冲是指一个显示缓冲区（显示设备上下文）和一个内存缓冲区（内存设备上下文）</p>
<p>在图形图像显示过程中，计算机从显示缓冲区取数据然后显示，很多图形的操作都很复杂需要大量的计算，很难访问一次显示缓冲区就能写入待显示的完整图形数据，通常需要 多次访问显示缓冲区，每次访问时写入最新计算的图形数据。而这样造成的后果是一个需要复杂计算的图形，你看到的效果可能是一部分一部分地显示出来的，造成很大的闪烁不连贯。 而使用双缓冲，可以使你先将计算的中间结果存放在另一个缓冲区中，但全部的计算结束，该缓冲区已经存储了完整的图形之后，再将该缓冲区的图形数据一次性复制到显示缓冲区</p>
<p>双缓冲就是用来解决单缓冲擦除图像时带来的屏幕闪烁问题</p>
<p>有些人可能会用SetROP2（R2_NOT）来实现这个原理就是清楚上一次绘制的案但毕竟不是我们自己写的所以这里我来讲如何自己实现双缓冲</p>
<p>现在TestView.h头文件(你的工程名字叫啥就是啥view)声明DoubleBuffer函数</p>
<p><img src="C:\Users\mibbp\AppData\Roaming\Typora\typora-user-images\image-20220324155911184.png" alt="image-20220324155911184"></p>
<p>然后再TestView.cpp源文件去实现对于函数代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CInteractionView::DoubleBuffer</span><span class="params">(CDC* pDC)</span><span class="comment">//双缓冲</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CRect rect;<span class="comment">//定义客户区</span></span><br><span class="line">	<span class="built_in">GetClientRect</span>(&amp;rect);<span class="comment">//获得客户区的大小</span></span><br><span class="line">	CDC MemDC;<span class="comment">//内存设备上下文</span></span><br><span class="line">	CBitmap NewBitmap, * pOldBitmap;<span class="comment">//内存中承载图像的临时位图</span></span><br><span class="line">	MemDC.<span class="built_in">CreateCompatibleDC</span>(pDC);<span class="comment">//建立与屏幕pDC兼容的MemDC </span></span><br><span class="line">	NewBitmap.<span class="built_in">CreateCompatibleBitmap</span>(pDC, rect.<span class="built_in">Width</span>(), rect.<span class="built_in">Height</span>());<span class="comment">//创建兼容位图 </span></span><br><span class="line">	pOldBitmap = MemDC.<span class="built_in">SelectObject</span>(&amp;NewBitmap); <span class="comment">//将兼容位图选入MemDC </span></span><br><span class="line">	MemDC.<span class="built_in">FillSolidRect</span>(rect, pDC-&gt;<span class="built_in">GetBkColor</span>());<span class="comment">//按原来背景填充客户区，否则是黑色 </span></span><br><span class="line">	<span class="built_in">DrawObject</span>(pDC);<span class="comment">//这是我写的一个绘制图形的函数</span></span><br><span class="line">	pDC-&gt;<span class="built_in">BitBlt</span>(<span class="number">0</span>, <span class="number">0</span>, rect.<span class="built_in">Width</span>(), rect.<span class="built_in">Height</span>(), &amp;MemDC, <span class="number">0</span>, <span class="number">0</span>, SRCCOPY);<span class="comment">//将内存位图拷贝到屏幕</span></span><br><span class="line">	MemDC.<span class="built_in">SelectObject</span>(pOldBitmap);<span class="comment">//恢复位图</span></span><br><span class="line">	NewBitmap.<span class="built_in">DeleteObject</span>();<span class="comment">//删除位图</span></span><br><span class="line">	MemDC.<span class="built_in">DeleteDC</span>();<span class="comment">//删除MemDC</span></span><br><span class="line">	<span class="built_in">ReleaseDC</span>(pDC);<span class="comment">//释放DC</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就实现了双缓冲机制，代码都有注释不是什么高深的东西就是字面意思，不要想得太复杂也不用纠结调用的函数原理是啥你只需要知道他有啥用就行，如果看不懂注释的意思那就不要强求自己了你就当一个模板记住就行，要用的时候直接复制下来就行。</p>
<h3 id="3-引力域"><a href="#3-引力域" class="headerlink" title="3.引力域"></a>3.引力域</h3><p>我们绘制的是一个封闭的多边形，但是最后要封闭的时候你很难精确的去点到那个起点那个像素点，所以我们这里引入引力域技术，效果就是在起点周围你点击鼠标他就会自动连上起点然后封闭。</p>
<p>很简单具体看我的OnLButtonDown函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CInteractionView::OnLButtonDown</span><span class="params">(UINT nFlags, CPoint point)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line">    <span class="comment">//如果你有起点（其实这里应该判断至少有三个点才能封闭）然后鼠标当前点在起点</span></span><br><span class="line">    <span class="comment">//为中心边长为10像素的正方形时你点击就会自动连上起点形成封闭</span></span><br><span class="line">	<span class="keyword">if</span> (bLBDown &amp;&amp; <span class="built_in">abs</span>(point.x - P[<span class="number">0</span>].x) &lt;= <span class="number">5</span> &amp;&amp; <span class="built_in">abs</span>(point.y - P[<span class="number">0</span>].y) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">		P[nCount] = P[<span class="number">0</span>];<span class="comment">//P[]数组是存所有点的，ncount是点的个数也是存当前点的下标</span></span><br><span class="line">		is_Close = <span class="literal">true</span>;<span class="comment">//is_Close用来判断封闭，这里封闭了所以将值改为true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> P[nCount++] = point;<span class="comment">//如果没在那个范围就正常存点</span></span><br><span class="line">	bLBDown = TRUE;<span class="comment">//只要你点击了就肯定有起点了吗，这个就是用来判断是否有起点了</span></span><br><span class="line">	</span><br><span class="line">	CView::<span class="built_in">OnLButtonDown</span>(nFlags, point);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那就说完了我把我的其他的代码发出来你们可以自己试试玩玩</p>
<h4 id="OnMouseMove"><a href="#OnMouseMove" class="headerlink" title="OnMouseMove:"></a>OnMouseMove:</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CInteractionView::OnMouseMove</span><span class="params">(UINT nFlags, CPoint point)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> 在此添加消息处理程序代码和/或调用默认值</span></span><br><span class="line">	CDC* pDC = <span class="built_in">GetDC</span>();</span><br><span class="line">	<span class="keyword">if</span> (bLBDown) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">abs</span>(point.x - P[<span class="number">0</span>].x) &lt;= <span class="number">5</span> &amp;&amp; <span class="built_in">abs</span>(point.y - P[<span class="number">0</span>].y) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">			<span class="built_in">SetCursor</span>(<span class="built_in">LoadCursor</span>(<span class="literal">NULL</span>, IDC_HAND));<span class="comment">//这一段的意思就是如果鼠标到</span></span><br><span class="line">            <span class="comment">//指定引力域了会将鼠标变成手指形状加强我们的人机交互体验</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">if</span> (!is_Close)P[nCount] = point;<span class="comment">//只要没闭合就画线</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">ReleaseDC</span>(pDC);<span class="comment">//释放DC</span></span><br><span class="line">	<span class="built_in">Invalidate</span>(FALSE);<span class="comment">//不擦除背景</span></span><br><span class="line">	</span><br><span class="line">	CView::<span class="built_in">OnMouseMove</span>(nFlags, point);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="DrawObject："><a href="#DrawObject：" class="headerlink" title="DrawObject："></a>DrawObject：</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CInteractionView::DrawObject</span><span class="params">(CDC* pDC)</span><span class="comment">//绘制多边形</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	pDC-&gt;<span class="built_in">SelectStockObject</span>(GRAY_BRUSH);<span class="comment">//画刷设置为灰色等会说为啥要用画刷</span></span><br><span class="line">    <span class="comment">//P[]是一个CPoint数组存了我要绘制的点</span></span><br><span class="line">    <span class="comment">//这个代码就是把P数组存的点用线连接绘制出来</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=nCount;i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!i) &#123;<span class="comment">//P[0]是起点所以是MoveTo先移动到第一个点</span></span><br><span class="line">			pDC-&gt;<span class="built_in">MoveTo</span>(P[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> pDC-&gt;<span class="built_in">LineTo</span>(P[i]);<span class="comment">//其余点就直接画过去就行</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (bLBDown) &#123;<span class="comment">//如果bLBDown为真就说明第一个点确定了</span></span><br><span class="line">		pDC-&gt;<span class="built_in">Rectangle</span>(P[<span class="number">0</span>].x - <span class="number">5</span>, P[<span class="number">0</span>].y - <span class="number">5</span>, P[<span class="number">0</span>].x + <span class="number">5</span>, P[<span class="number">0</span>].y + <span class="number">5</span>);</span><br><span class="line">        <span class="comment">//在第一个点绘制一个灰色的矩形，这个矩形就是引力域范围等会就说</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这里就实现了交互式绘制多边形</p>
<h2 id="二-有效边表填充算法"><a href="#二-有效边表填充算法" class="headerlink" title="二.有效边表填充算法"></a>二.有效边表填充算法</h2><p>也可以说是y向连贯性算法，有效边表填充算法就是对x扫描线的一个优化，这个可能理解有点困难如果你的c/c++基础很差，数据结构也不会，指针概念模糊，那可能这里很难听懂，对此我建议<del>开摆</del>多看几遍我会把这些你们<del>没学</del>遗漏的知识讲一遍。不过有一说一这个确实先对来说难，比起种子填充算法来说，种子填充就是个简单的BFS或者DFS搜索涉及的前置知识不多。</p>
<h3 id="1-X扫描线算法"><a href="#1-X扫描线算法" class="headerlink" title="1.X扫描线算法"></a>1.X扫描线算法</h3><p><img src="C:\Users\mibbp\AppData\Roaming\Typora\typora-user-images\image-20220321222853409.png" alt="image-20220321222853409"></p>
<h4 id="X-扫描线算法一共就四步："><a href="#X-扫描线算法一共就四步：" class="headerlink" title="X-扫描线算法一共就四步："></a>X-扫描线算法一共就四步：</h4><ol>
<li><p>求交:   确定扫描线和多边形的交点</p>
</li>
<li><p>排序：把所有交点按递增顺序排序（按交点x值递增排序，确保交点两两配对时填充区间的正确性）</p>
</li>
<li><p>配对：确定填充区间</p>
</li>
<li><p>着色：着色规则有说法的，就我拿一个bool flag初始化为false,这个flag如果为false表示在多边形外面否则在里面，一开始为false，当你碰到一个交点的时候就代表从外进入到内，所以将flag=true,只要flag为true就涂色，因为当你碰到一个交点那你肯定要么是从外到内要么就是内到外，所以状态改变一下就好了</p>
</li>
</ol>
<h4 id="边界像素处理原则："><a href="#边界像素处理原则：" class="headerlink" title="边界像素处理原则："></a>边界像素处理原则：</h4><p><img src="https://img-blog.csdn.net/20180618161758418?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p4Y2hfX19f/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>
<p>假设你要填充的是黑色正方形，那对于边界上的点该怎么取舍呢，如果你边界上的点全涂色，那就是左边那个图的情况，那肯定是不对的因为你要涂色的图形才2x2大小而你画的是个3x3大小的，我们这里采用的是<strong>左闭右开，上闭下开</strong>原则</p>
<p>对于顶点到底是算一个还是算两个呢，如果算一个那看上面那个多边形图的红色扫平描线，如果算一个点，那么红色扫描小经过p3的时候flag就会变成true那么他就会把(p3,p5)区间填充颜色，那就错了，那假如顶点算两个点那你看紫色扫描线，当她经过p2点的时候flag因为经过两个点就还是false,那么就不会填充p2到边界这段，那也错了，那该如何处理这种情况呢，处理办法就是这个顶点上面有多少条边就把他当几个点。你这么想如果它上面没有边或者有两条边那他肯定是尖尖，所以y方向上是不需要填充的，如果只有一条边，那他的y方向上就需要填充。</p>
<h3 id="2-指针"><a href="#2-指针" class="headerlink" title="2.指针"></a>2.指针</h3><p>因为接下来要讲的链表和有效边表算法都涉及到指针，担心有些同学指针概念模糊不会用这里还是简单讲一下，因为指针用了要是用不好后果还是很可怕的有时候。</p>
<p>我们知道C/C++的变量存放在内存中，而<strong>内存其实就是一组有序字节组成的数组</strong>，每个字节有唯一的内存地址。CPU 通过内存寻址对存储在内存中的某个指定数据对象的地址进行定位。这里，数据对象是指存储在内存中的一个指定数据类型的数值或字符串，它们都有一个自己的地址，而指针便是保存这个地址的变量。也就是说：<strong>指针是一种保存变量地址的变量</strong>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N =<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	<span class="keyword">int</span>* a=<span class="literal">NULL</span>;<span class="comment">//声明一个 int 类型的指针 a </span></span><br><span class="line">	<span class="keyword">char</span> *b=<span class="literal">NULL</span>;<span class="comment">//声明一个 char 类型的指针 b,*这个跟谁挨着都行</span></span><br><span class="line">	<span class="comment">//指针一定要初始化如果一个指针没有被初始化，那么程序就不知道它指向哪里。</span></span><br><span class="line">	<span class="comment">//它可能指向一个非法地址，这时，程序会报错 </span></span><br><span class="line">	<span class="keyword">int</span> x=<span class="number">10</span>;</span><br><span class="line">	a=&amp;x; <span class="comment">//&amp;是取地址符，也就是将存储x变量的地址给了a </span></span><br><span class="line">	</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;x变量的地址:&quot;</span>&lt;&lt;a&lt;&lt;endl;<span class="comment">//输出看一看</span></span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;a地址存放的数据：&quot;</span>&lt;&lt;*a&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">int</span>** p=&amp;a;<span class="comment">//也可以二级指针 去指向指针</span></span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;a指针的地址:&quot;</span>&lt;&lt;p&lt;&lt;endl;<span class="comment">//输出看一看</span></span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;p地址存放的数据：&quot;</span>&lt;&lt;*p&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>指针也可以进行加减还有很多关于指针的东西，但这里就不说了感兴趣可以自己网上查查，这里至少简单了解一下指针，不然接下来会不好理解。</p>
<h3 id="3-链表"><a href="#3-链表" class="headerlink" title="3.链表"></a>3.链表</h3><p>因为接下来说的几种数据结构都涉及到了链表的思路如果你会那就忽略这里</p>
<p>链表是一种这样的数据结构，其中的对象按线性顺序排列。数组的线性顺序是由数组下标决定的，然而与数组不同的是，链表的顺序是由各个对象的指针决定的。链表为动态集合提供了一种简单且灵活的表示方法。相对于数组，链表优点是使用直观，便于快速、随机地存取线性表中的任一元素，但缺点是对其进行 插入和删除操作时需要移动大量的数组元素，同时由于数组属于静态内存分配，定义数组时必须指定数组的长度，程序一旦运行，其长度就不能再改变，实际使用个数不能超过数组元素最大长度的限制，否则就会发生下标越界的错误，低于最大长度时又会造成系统资源的浪费，因此空间效率差。</p>
<p>这里就介绍一下单链表的组成，插入，查找，删除等操作，主要是有链表得这么一个概念。</p>
<p>链表组成部分就两部分</p>
<p>数据域就存储该节点对应的数据内容，而指针域就是储存下一个节点的指针。</p>
<p><img src="https://pic4.zhimg.com/80/v2-392a58393fd03c2893bfb21b3a7b0d97_720w.jpg" alt="img"></p>
<p>接下来看一下具体代码咋写，不理解的我在下面放了<strong>图示</strong>可以和注释一起帮助理解，如果还是不理解也可以网上看看别人的讲解，我讲的也不好。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Link</span>&#123;</span><span class="comment">//定义链表结构体</span></span><br><span class="line">	<span class="comment">//数据域</span></span><br><span class="line">	<span class="keyword">int</span>  data;</span><br><span class="line">	<span class="comment">//指针域</span></span><br><span class="line">    Link *Next;<span class="comment">//(c++ 在创建结构体变量的时候可以省略struct关键字，c不行)</span></span><br><span class="line">    <span class="comment">//像这种只有一个指针域的就是单链表</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);<span class="comment">//关闭源流同步不重要忽略</span></span><br><span class="line"></span><br><span class="line">    Link * p = (Link*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(Link));<span class="comment">//创建一个头结点</span></span><br><span class="line">    Link * temp = p;<span class="comment">//声明一个指针指向头结点，用于遍历链表</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//生成链表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//创建节点并初始化</span></span><br><span class="line">        Link *a = (Link*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(Link));</span><br><span class="line">        a-&gt;data = i;</span><br><span class="line">        a-&gt;Next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//建立新节点与直接前驱节点的逻辑关系</span></span><br><span class="line">        temp-&gt;Next = a;</span><br><span class="line">        temp = temp-&gt;Next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历输出链表，也可以实现查找操作</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输出链表:&quot;</span>&lt;&lt;endl; </span><br><span class="line">    temp=p;<span class="comment">//将temp指向头节点 </span></span><br><span class="line">    <span class="keyword">while</span>(temp-&gt;Next!=<span class="literal">NULL</span>)&#123;<span class="comment">//如果节点的下一个节点不为空 则一直循环下去知道为空 </span></span><br><span class="line">    	cout&lt;&lt;temp-&gt;Next-&gt;data&lt;&lt;<span class="string">&#x27; &#x27;</span>;<span class="comment">//则输出节点下一个节点的数据 </span></span><br><span class="line">    	temp=temp-&gt;Next;<span class="comment">//移动节点到下一个节点 </span></span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//删除结点数据为3的结点</span></span><br><span class="line">	<span class="keyword">int</span> val=<span class="number">3</span>;</span><br><span class="line">	Link *del;<span class="comment">//存储删除结点的地址 </span></span><br><span class="line">	temp=p;</span><br><span class="line">	<span class="keyword">while</span>(temp-&gt;Next!=<span class="literal">NULL</span>)&#123;<span class="comment">//如果节点的下一个节点不为空 则一直循环下去知道为空 </span></span><br><span class="line">    	<span class="keyword">if</span>(temp-&gt;Next-&gt;data==val)&#123;</span><br><span class="line">    		del=temp-&gt;Next;</span><br><span class="line">    		temp-&gt;Next=temp-&gt;Next-&gt;Next;</span><br><span class="line">    		<span class="built_in">free</span>(del);<span class="comment">//释放内存为了防止内存泄漏的发生，须及时调用free（）释放已不再使用的内存 </span></span><br><span class="line">    		<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">    	temp=temp-&gt;Next;<span class="comment">//移动节点到下一个节点 </span></span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;删除结点为3的结点后的链表：&quot;</span>&lt;&lt;endl;</span><br><span class="line">	temp=p;<span class="comment">//将temp指向头节点 </span></span><br><span class="line">    <span class="keyword">while</span>(temp-&gt;Next!=<span class="literal">NULL</span>)&#123;<span class="comment">//如果节点的下一个节点不为空 则一直循环下去知道为空 </span></span><br><span class="line">    	cout&lt;&lt;temp-&gt;Next-&gt;data&lt;&lt;<span class="string">&#x27; &#x27;</span>;<span class="comment">//则输出节点下一个节点的数据 </span></span><br><span class="line">    	temp=temp-&gt;Next;<span class="comment">//移动节点到下一个节点 </span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	 </span><br><span class="line">	<span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：<img src="C:\Users\mibbp\AppData\Roaming\Typora\typora-user-images\image-20220324172417121.png" alt="image-20220324172417121"></p>
<p><img src="http://data.biancheng.net/uploads/allimg/181124/2-1Q1242005532U.gif" alt="链表中插入元素的 3 种情况示意图"></p>
<p><img src="http://data.biancheng.net/uploads/allimg/181124/2-1Q124200Q3239.gif" alt="链表删除元素示意图"></p>
<h3 id="4-有效边表"><a href="#4-有效边表" class="headerlink" title="4.有效边表"></a>4.有效边表</h3><p>如果一条扫描线我们每条边都去和他进行求交，那会很麻烦，就比如我们对n边型进行求交那就是O(N)的时间复杂度，就是要求N次交10000条边就是10000次，那会很慢，我们只需要对有效边去求交就行了，有效边就是和扫描线与交点的边，为此我们建立有效边表这一数据结构。</p>
<p>数据结构就是存储，组织数据的一种方式，说简单点就是以一种特定的形式去存储一些数据，来达到优化的目的，99%的数据结构都是拿来优化的。</p>
<p>有效边表的格式：</p>
<p><img src="https://img-blog.csdn.net/20180618162419460?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p4Y2hfX19f/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CAET</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">CAET</span>();</span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">CAET</span>();</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">double</span>  x;<span class="comment">//当前扫描线与有效边交点的x坐标</span></span><br><span class="line">	<span class="keyword">int</span>     yMax;<span class="comment">//边的最大y值</span></span><br><span class="line">	<span class="keyword">double</span>  k;<span class="comment">//斜率的倒数(x的增量)</span></span><br><span class="line">	Point1  ps;<span class="comment">//边的起点</span></span><br><span class="line">	Point1  pe;<span class="comment">//边的终点</span></span><br><span class="line">	CAET* pNext;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>其中x就是有效边与扫描线的交点的x坐标，ymax就是这条边最大的y坐标，1/k是该直线的斜率倒数，next是下一条边的结点指针</p>
<p>引入有效边表的目的是为了方便我们去计算扫描线与边的交点，我们可以根据之前所学的直线算法的分量思想去推算出下一条扫描线与该边的交点，简单地说就是我们让y坐标+1，这样x坐标只需要去加1/k，这样我们就可以根据有效边表去高效的计算出扫描线与有效边的交点</p>
<p><img src="https://img-blog.csdn.net/20180618162321279?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p4Y2hfX19f/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>
<p>可以根据计算机图形学书P118有效边表的建立过程自己模拟一遍，这里就不赘述了。</p>
<h3 id="5-桶表和边表"><a href="#5-桶表和边表" class="headerlink" title="5.桶表和边表"></a>5.桶表和边表</h3><p>不过这里又有一个问题，我们虽然可以高效的计算出扫描线与有效边的交点，但是我们不知道什么时候让有效边插入，就是我们不知道什么时候去和某一条有效边去进行求交，所以我们这里引入了桶表和边表，边表用以存放多边形上各条边出现的信息，因为水平边斜率倒数是无穷大且水平边就是扫描线所以不做考虑。</p>
<p>桶表大概就是这样：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBucket</span>  </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">CBucket</span>();</span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">CBucket</span>();</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span>     ScanLine;     <span class="comment">//扫描线</span></span><br><span class="line">	CAET    *pET;         <span class="comment">//桶上的边表指针</span></span><br><span class="line">	CBucket *pNext;		  <span class="comment">//桶表的下一个的指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>你可以理解为桶表就是所有扫描线的集合，然后每条扫描线都有一个边表指针表示在该桶表节点上的边表，这里边表的插入就类似于链表，桶表本身就是链表只是在它的每一个节点上又去接上了一个边表，将每条边的信息（也就是边表）链入与该边最小y坐标（ymin）相对应的桶处。也就是说，若某边的较低端点为ymin，则该边就存放在相应的扫描线桶中。<br>对于每一条扫描线，如果新增多条边，则按x|ymin（较低端的x坐标）坐标递增的顺序存放在一个链表中，若x|ymin 相等，则按照1/k由小到大<strong>排序</strong>（接下来就会讲如何排序），这样就形成边表，（不存在x相等，k还想等情况）。</p>
<p>可以配合图来理解</p>
<p>这是边表，结构其实类似于有效边表，所以可以和有效边表用一个类来表示，存放的是一条边较低端的端点x坐标（用来判断边表在桶中的排序），和最高端的y坐标（用来判断有效边何时无效），以及斜率倒数。</p>
<p><img src="https://img-blog.csdn.net/20180618162846351?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p4Y2hfX19f/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>
<p>这是桶表和边表这样看上去就很好理解了</p>
<p><img src="https://img-blog.csdn.net/20180618163019661?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p4Y2hfX19f/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>
<h3 id="6-动态链表冒泡排序"><a href="#6-动态链表冒泡排序" class="headerlink" title="6.动态链表冒泡排序"></a>6.动态链表冒泡排序</h3><p>刚刚也提到了排序，我们要对边表进行一个排序，为啥要排序，是因为我们要填充颜色，我们要先配对确定填充空间，然后填色，忘了的可以看看上面说的那四个步骤，排序规则是x小在前面，如果一样那就比斜率倒数，不存在x和斜率都相等的情况，因为我们排序的边表有个前提条件就是y坐标相同因为在同一条扫描线上。</p>
<p>那怎么对动态链表排序呢，这里有很多方法，这里说一个最简单不过效率也是最低的冒泡排序，其实我认为这里用堆来优化应该是最好的，因为堆是没插入一个新的东西才会up(),down(),效率每次都是log(N),总共就是Mlog(N)，但是其他log级别排序比如快排，是每次都是Nlog(N)总的算下来应该是NMlog(N),,而冒泡本身是N^2,排序M次则是M*N^2,不过优点就是很稳定。对于排序我的B站有相关讲解感兴趣的可以去看看然后自己试着去优化，这里先讲冒泡。</p>
<p>先看一下冒泡排序的流程：</p>
<p><img src="https://img-blog.csdn.net/20180329160532623" alt="在这里插入图片描述"></p>
<p>简单地说就是她一共是两层循环，外层是确定排序位置，内部进行相邻比较，就是</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里写的不一定对就是表述一下排序思路，从小到大排序</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    外部是确定位置就当i等于<span class="number">0</span>的时候那进行完内部循环数组下标为<span class="number">0</span>的点就是正确排序的点</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=i;j+<span class="number">1</span>&lt;n;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(j&gt;j+<span class="number">1</span>)<span class="built_in">swap</span>(j,j+<span class="number">1</span>);<span class="comment">//相邻点比较大了就交换</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要是不理解冒泡排序的思路可以看一下别人的博客或者视频不难，我主要说动态链表的排序，其实这里最好视频讲但现在没时间</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CFill::ETOrder</span><span class="params">()</span><span class="comment">//边表的冒泡排序算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	CAET* pT1 = <span class="literal">NULL</span>, * pT2 = <span class="literal">NULL</span>;<span class="comment">//CAET是边表类，创建了两个指针</span></span><br><span class="line">	<span class="keyword">int</span> Count = <span class="number">1</span>;<span class="comment">//计数的</span></span><br><span class="line">	pT1 = pHeadE;<span class="comment">//pHeadE是头指针，pT1指向头指针</span></span><br><span class="line">	<span class="keyword">if</span> (pT1 == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;<span class="comment">//如果头指针为空则说明没东西不需要排序直接返回</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == pT1-&gt;pNext)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;<span class="comment">//如果头指针下一个为空则说明就一个那也不需要排序直接返回</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">NULL</span> != pT1-&gt;pNext)<span class="comment">//遍历统计结点数</span></span><br><span class="line">	&#123;</span><br><span class="line">		Count++;<span class="comment">//统计结点数</span></span><br><span class="line">		pT1 = pT1-&gt;pNext;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; Count; i++)<span class="comment">//外部循环确定正确排序下标</span></span><br><span class="line">	&#123;</span><br><span class="line">		pT1 = pHeadE;<span class="comment">//pT1重置为头指针      </span></span><br><span class="line">		<span class="keyword">if</span> (pT1-&gt;x &gt; pT1-&gt;pNext-&gt;x || (pT1-&gt;x == pT1-&gt;pNext-&gt;x &amp;&amp; pT1-&gt;k &gt; pT1-&gt;pNext-&gt;k))</span><br><span class="line">		&#123;</span><br><span class="line">            <span class="comment">// ||前半段是该节点的x坐标如果比下一个节点大那就要交换</span></span><br><span class="line">            <span class="comment">//下半段就是如果x坐标相等但是k大的话也要交换</span></span><br><span class="line">            <span class="comment">//交换步骤，交换pt1和Pt1下一个节点</span></span><br><span class="line">			pT2 = pT1-&gt;pNext;<span class="comment">//pt2存一下pt1下一个节点</span></span><br><span class="line">			pT1-&gt;pNext = pT1-&gt;pNext-&gt;pNext;<span class="comment">//这里看一下我上面说的链表，让pt1下一个节点指向pt2的下一个</span></span><br><span class="line">			pT2-&gt;pNext = pT1;<span class="comment">//然后再让pt2下一个指向pt1</span></span><br><span class="line">			pHeadE = pT2;<span class="comment">//头指针更新为pt2</span></span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//因为第一次如果交换了则会涉及头指针的变换，所以上面是第一次交换做了特判接下来就是遍历到底</span></span><br><span class="line">		pT1 = pHeadE;<span class="comment">//重置为头指针</span></span><br><span class="line">		<span class="keyword">while</span> (pT1-&gt;pNext-&gt;pNext != <span class="literal">NULL</span>)<span class="comment">//如果下一个的下一个为空就结束，因为要比的就是下一个和下下一个</span></span><br><span class="line">		&#123;</span><br><span class="line">			pT2 = pT1;<span class="comment">//pt2存Pt1</span></span><br><span class="line">			pT1 = pT1-&gt;pNext;<span class="comment">//pt1存pt1下一个，</span></span><br><span class="line">			<span class="keyword">if</span> (pT1-&gt;x &gt; pT1-&gt;pNext-&gt;x || (pT1-&gt;x == pT1-&gt;pNext-&gt;x &amp;&amp; pT1-&gt;k &gt; pT1-&gt;pNext-&gt;k))</span><br><span class="line">			&#123;	<span class="comment">//和上面一样的判断是否需要交换</span></span><br><span class="line">				pT2-&gt;pNext = pT1-&gt;pNext;</span><br><span class="line">				pT1-&gt;pNext = pT1-&gt;pNext-&gt;pNext;</span><br><span class="line">				pT2-&gt;pNext-&gt;pNext = pT1;</span><br><span class="line">				pT1 = pT2-&gt;pNext;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就排序完了</p>
<h3 id="7-总流程"><a href="#7-总流程" class="headerlink" title="7.总流程"></a>7.总流程</h3><p>首先一共就四步，其他的什么桶表边表都是用来辅助优化的。</p>
<ol>
<li>求交:   确定扫描线和多边形的交点</li>
<li>排序：把所有交点按递增顺序排序（按交点x值递增排序，确保交点两两配对时填充区间的正确性）</li>
<li>配对：确定填充区间</li>
<li>着色：着色规则有说法的，就我拿一个bool flag初始化为false,这个flag如果为false表示在多边形外面否则在里面，一开始为false，当你碰到一个交点的时候就代表从外进入到内，所以将flag=true,只要flag为true就涂色，因为当你碰到一个交点那你肯定要么是从外到内要么就是内到外，所以状态改变一下就好了</li>
</ol>
<p>为了加快求交速度引入了有效边，为了知道何时插入有效边，且帮助排序引入了，桶表和边表，排序算法也是为了优化排序速度和稳定性，配对就是两两配对就是边界顶点根据点上面的有效边数确定它到底算几个点，然后就是着色。</p>
<p>这是我fill.h就是实现填充的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Bucket.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;Point1.h&quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CFill</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">CFill</span>();</span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">CFill</span>();</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">SetPoint</span><span class="params">(Point1* p, <span class="keyword">int</span>)</span></span>;<span class="comment">//初始化</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">CreateBucket</span><span class="params">()</span></span>;<span class="comment">//创建桶</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">CreateEdge</span><span class="params">()</span></span>;<span class="comment">//边表</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">AddET</span><span class="params">(CAET*)</span></span>;<span class="comment">//合并ET表</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ETOrder</span><span class="params">()</span></span>;<span class="comment">//ET表排序</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Gouraud</span><span class="params">(CDC*)</span></span>;<span class="comment">//填充多边形</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ClearMemory</span><span class="params">()</span></span>;<span class="comment">//清理内存</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">DeleteAETChain</span><span class="params">(CAET* pAET)</span></span>;<span class="comment">//删除边表</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">int</span>     PNum;<span class="comment">//顶点个数</span></span><br><span class="line">	Point1* P;<span class="comment">//顶点坐标动态数组</span></span><br><span class="line">	CAET* pHeadE, * pCurrentE, * pEdge; <span class="comment">//有效边表结点指针</span></span><br><span class="line">	CBucket* pHeadB, * pCurrentB;        <span class="comment">//桶表结点指针</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<p>fill.cpp源文件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Fill.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Round(f) int(floor(f+0.5))</span></span><br><span class="line">CFill::<span class="built_in">CFill</span>()<span class="comment">//构造函数初始化</span></span><br><span class="line">&#123;</span><br><span class="line">	PNum = <span class="number">0</span>;</span><br><span class="line">	P = <span class="literal">NULL</span>;</span><br><span class="line">	pEdge = <span class="literal">NULL</span>;</span><br><span class="line">	pHeadB = <span class="literal">NULL</span>;</span><br><span class="line">	pHeadE = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CFill::~<span class="built_in">CFill</span>()<span class="comment">//析构函数</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (P != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">delete</span>[] P;</span><br><span class="line">		P = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">ClearMemory</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CFill::SetPoint</span><span class="params">(Point1* p, <span class="keyword">int</span> m)</span><span class="comment">//将我们的多边形点数组转存到P</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	P = <span class="keyword">new</span> Point1[m];<span class="comment">//创建一维动态数组</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		P[i]=p[i];</span><br><span class="line">	&#125;</span><br><span class="line">	PNum = m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CFill::CreateBucket</span><span class="params">()</span><span class="comment">//创建桶表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> yMin, yMax;</span><br><span class="line">	yMin = yMax = P[<span class="number">0</span>].y;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; PNum; i++)<span class="comment">//查找多边形所覆盖的最小和最大扫描线</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (P[i].y &lt; yMin)</span><br><span class="line">		&#123;</span><br><span class="line">			yMin = P[i].y;<span class="comment">//扫描线的最小值</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (P[i].y &gt; yMax)</span><br><span class="line">		&#123;</span><br><span class="line">			yMax = P[i].y;<span class="comment">//扫描线的最大值</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> y = yMin; y &lt;= yMax; y++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (yMin == y)<span class="comment">//如果是扫描线的最小值</span></span><br><span class="line">		&#123;</span><br><span class="line">			pHeadB = <span class="keyword">new</span> CBucket;<span class="comment">//建立桶的头结点</span></span><br><span class="line">			pCurrentB = pHeadB;<span class="comment">//pCurrentB为CBucket当前结点指针</span></span><br><span class="line">			pCurrentB-&gt;ScanLine = yMin;</span><br><span class="line">			pCurrentB-&gt;pET = <span class="literal">NULL</span>;<span class="comment">//没有链接边表</span></span><br><span class="line">			pCurrentB-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span><span class="comment">//其他扫描线</span></span><br><span class="line">		&#123;</span><br><span class="line">			pCurrentB-&gt;pNext = <span class="keyword">new</span> CBucket;<span class="comment">//建立桶的其他结点</span></span><br><span class="line">			pCurrentB = pCurrentB-&gt;pNext;</span><br><span class="line">			pCurrentB-&gt;ScanLine = y;</span><br><span class="line">			pCurrentB-&gt;pET = <span class="literal">NULL</span>;</span><br><span class="line">			pCurrentB-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CFill::CreateEdge</span><span class="params">()</span><span class="comment">//创建边表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; PNum; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		pCurrentB = pHeadB;</span><br><span class="line">		<span class="keyword">int</span> j = (i + <span class="number">1</span>) % PNum;<span class="comment">//边的另一个顶点，P[i]和P[j]点对构成边</span></span><br><span class="line">		<span class="keyword">if</span> (P[i].y &lt; P[j].y)<span class="comment">//边的终点比起点高</span></span><br><span class="line">		&#123;</span><br><span class="line">			pEdge = <span class="keyword">new</span> CAET;</span><br><span class="line">			pEdge-&gt;x = P[i].x;<span class="comment">//计算ET表的值</span></span><br><span class="line">			pEdge-&gt;yMax = P[j].y;</span><br><span class="line">			pEdge-&gt;k = (P[j].x - P[i].x) / (P[j].y - P[i].y);<span class="comment">//代表1/k</span></span><br><span class="line">			pEdge-&gt;ps = P[i];<span class="comment">//绑定顶点和颜色</span></span><br><span class="line">			pEdge-&gt;pe = P[j];</span><br><span class="line">			pEdge-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">			<span class="keyword">while</span> (pCurrentB-&gt;ScanLine != P[i].y)<span class="comment">//在桶内寻找当前边的yMin</span></span><br><span class="line">			&#123;</span><br><span class="line">				pCurrentB = pCurrentB-&gt;pNext;<span class="comment">//移到yMin所在的桶结点</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (P[j].y &lt; P[i].y)<span class="comment">//边的终点比起点低</span></span><br><span class="line">		&#123;</span><br><span class="line">			pEdge = <span class="keyword">new</span> CAET;</span><br><span class="line">			pEdge-&gt;x = P[j].x;</span><br><span class="line">			pEdge-&gt;yMax = P[i].y;</span><br><span class="line">			pEdge-&gt;k = (P[i].x - P[j].x) / (P[i].y - P[j].y);</span><br><span class="line">			pEdge-&gt;ps = P[i];</span><br><span class="line">			pEdge-&gt;pe = P[j];</span><br><span class="line">			pEdge-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">			<span class="keyword">while</span> (pCurrentB-&gt;ScanLine != P[j].y)</span><br><span class="line">			&#123;</span><br><span class="line">				pCurrentB = pCurrentB-&gt;pNext;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (P[i].y != P[j].y)</span><br><span class="line">		&#123;</span><br><span class="line">			pCurrentE = pCurrentB-&gt;pET;</span><br><span class="line">			<span class="keyword">if</span> (pCurrentE == <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				pCurrentE = pEdge;</span><br><span class="line">				pCurrentB-&gt;pET = pCurrentE;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">while</span> (pCurrentE-&gt;pNext != <span class="literal">NULL</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					pCurrentE = pCurrentE-&gt;pNext;</span><br><span class="line">				&#125;</span><br><span class="line">				pCurrentE-&gt;pNext = pEdge;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CFill::Gouraud</span><span class="params">(CDC* pDC)</span><span class="comment">//填充多边形</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CAET* pT1 = <span class="literal">NULL</span>, * pT2 = <span class="literal">NULL</span>;</span><br><span class="line">	pHeadE = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">for</span> (pCurrentB = pHeadB; pCurrentB != <span class="literal">NULL</span>; pCurrentB = pCurrentB-&gt;pNext)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (pCurrentE = pCurrentB-&gt;pET; pCurrentE != <span class="literal">NULL</span>; pCurrentE = pCurrentE-&gt;pNext)</span><br><span class="line">		&#123;</span><br><span class="line">			pEdge = <span class="keyword">new</span> CAET;</span><br><span class="line">			pEdge-&gt;x = pCurrentE-&gt;x;</span><br><span class="line">			pEdge-&gt;yMax = pCurrentE-&gt;yMax;</span><br><span class="line">			pEdge-&gt;k = pCurrentE-&gt;k;</span><br><span class="line">			pEdge-&gt;ps = pCurrentE-&gt;ps;</span><br><span class="line">			pEdge-&gt;pe = pCurrentE-&gt;pe;</span><br><span class="line">			pEdge-&gt;pNext = <span class="literal">NULL</span>;</span><br><span class="line">			<span class="built_in">AddET</span>(pEdge);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">ETOrder</span>();</span><br><span class="line">		pT1 = pHeadE;</span><br><span class="line">		<span class="keyword">if</span> (pT1 == <span class="literal">NULL</span>)</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">while</span> (pCurrentB-&gt;ScanLine &gt;= pT1-&gt;yMax)<span class="comment">//下闭上开</span></span><br><span class="line">		&#123;</span><br><span class="line">			CAET* pAETTEmp = pT1;</span><br><span class="line">			pT1 = pT1-&gt;pNext;</span><br><span class="line">			<span class="keyword">delete</span> pAETTEmp;</span><br><span class="line">			pHeadE = pT1;</span><br><span class="line">			<span class="keyword">if</span> (pHeadE == <span class="literal">NULL</span>)</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (pT1-&gt;pNext != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			pT2 = pT1;</span><br><span class="line">			pT1 = pT2-&gt;pNext;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (pT1 != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (pCurrentB-&gt;ScanLine &gt;= pT1-&gt;yMax)<span class="comment">//下闭上开</span></span><br><span class="line">			&#123;</span><br><span class="line">				CAET* pAETTemp = pT1;</span><br><span class="line">				pT2-&gt;pNext = pT1-&gt;pNext;</span><br><span class="line">				pT1 = pT2-&gt;pNext;</span><br><span class="line">				<span class="keyword">delete</span> pAETTemp;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				pT2 = pT1;</span><br><span class="line">				pT1 = pT2-&gt;pNext;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		BOOL bInFlag = FALSE;<span class="comment">//区间内外测试标志，初始值为假表示区间外部</span></span><br><span class="line">		<span class="keyword">double</span> xb, xe;<span class="comment">//扫描线与有效边相交区间的起点和终点坐标</span></span><br><span class="line">		<span class="keyword">for</span> (pT1 = pHeadE; pT1 != <span class="literal">NULL</span>; pT1 = pT1-&gt;pNext)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (FALSE == bInFlag)</span><br><span class="line">			&#123;</span><br><span class="line">				xb = pT1-&gt;x;</span><br><span class="line">				bInFlag = TRUE;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				xe = pT1-&gt;x;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">double</span> x = xb; x &lt; xe; x++)<span class="comment">//左闭右开</span></span><br><span class="line">				&#123;</span><br><span class="line">					pDC-&gt;<span class="built_in">SetPixelV</span>(<span class="built_in">Round</span>(x), pCurrentB-&gt;ScanLine, <span class="built_in">RGB</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">				&#125;</span><br><span class="line">				bInFlag = FALSE;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (pT1 = pHeadE; pT1 != <span class="literal">NULL</span>; pT1 = pT1-&gt;pNext)<span class="comment">//边的连续性</span></span><br><span class="line">		&#123;</span><br><span class="line">			pT1-&gt;x = pT1-&gt;x + pT1-&gt;k;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CFill::AddET</span><span class="params">(CAET* pNewEdge)</span><span class="comment">//合并ET表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	CAET* pCE = pHeadE;</span><br><span class="line">	<span class="keyword">if</span> (pCE == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		pHeadE = pNewEdge;</span><br><span class="line">		pCE = pHeadE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (pCE-&gt;pNext != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			pCE = pCE-&gt;pNext;</span><br><span class="line">		&#125;</span><br><span class="line">		pCE-&gt;pNext = pNewEdge;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CFill::ETOrder</span><span class="params">()</span><span class="comment">//边表的冒泡排序算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	CAET* pT1 = <span class="literal">NULL</span>, * pT2 = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">int</span> Count = <span class="number">1</span>;</span><br><span class="line">	pT1 = pHeadE;</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == pT1)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="literal">NULL</span> == pT1-&gt;pNext)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">NULL</span> != pT1-&gt;pNext)</span><br><span class="line">	&#123;</span><br><span class="line">		Count++;</span><br><span class="line">		pT1 = pT1-&gt;pNext;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; Count; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		pT1 = pHeadE;</span><br><span class="line">		<span class="keyword">if</span> (pT1-&gt;x &gt; pT1-&gt;pNext-&gt;x || (pT1-&gt;x == pT1-&gt;pNext-&gt;x &amp;&amp; pT1-&gt;k &gt; pT1-&gt;pNext-&gt;k))</span><br><span class="line">		&#123;</span><br><span class="line">			pT2 = pT1-&gt;pNext;</span><br><span class="line">			pT1-&gt;pNext = pT1-&gt;pNext-&gt;pNext;</span><br><span class="line">			pT2-&gt;pNext = pT1;</span><br><span class="line">			pHeadE = pT2;</span><br><span class="line">		&#125;</span><br><span class="line">		pT1 = pHeadE;</span><br><span class="line">		<span class="keyword">while</span> (pT1-&gt;pNext-&gt;pNext != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			pT2 = pT1;</span><br><span class="line">			pT1 = pT1-&gt;pNext;</span><br><span class="line">			<span class="keyword">if</span> (pT1-&gt;x &gt; pT1-&gt;pNext-&gt;x || (pT1-&gt;x == pT1-&gt;pNext-&gt;x &amp;&amp; pT1-&gt;k &gt; pT1-&gt;pNext-&gt;k))</span><br><span class="line">			&#123;</span><br><span class="line">				pT2-&gt;pNext = pT1-&gt;pNext;</span><br><span class="line">				pT1-&gt;pNext = pT1-&gt;pNext-&gt;pNext;</span><br><span class="line">				pT2-&gt;pNext-&gt;pNext = pT1;</span><br><span class="line">				pT1 = pT2-&gt;pNext;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CFill::ClearMemory</span><span class="params">()</span><span class="comment">//安全删除所有桶与桶上连接的边</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">DeleteAETChain</span>(pHeadE);</span><br><span class="line">	CBucket* pBucket = pHeadB;</span><br><span class="line">	<span class="keyword">while</span> (pBucket != <span class="literal">NULL</span>)<span class="comment">//针对每一个桶</span></span><br><span class="line">	&#123;</span><br><span class="line">		CBucket* pBucketTemp = pBucket-&gt;pNext;</span><br><span class="line">		<span class="built_in">DeleteAETChain</span>(pBucket-&gt;pET);</span><br><span class="line">		<span class="keyword">delete</span> pBucket;</span><br><span class="line">		pBucket = pBucketTemp;</span><br><span class="line">	&#125;</span><br><span class="line">	pHeadB = <span class="literal">NULL</span>;</span><br><span class="line">	pHeadE = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CFill::DeleteAETChain</span><span class="params">(CAET* pAET)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (pAET != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		CAET* pAETTemp = pAET-&gt;pNext;</span><br><span class="line">		<span class="keyword">delete</span> pAET;</span><br><span class="line">		pAET = pAETTemp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="三-种子填充算法"><a href="#三-种子填充算法" class="headerlink" title="三.种子填充算法"></a>三.种子填充算法</h2><h3 id="1-DFS-栈"><a href="#1-DFS-栈" class="headerlink" title="1.DFS(栈)"></a>1.DFS(栈)</h3><h3 id="2-BFS（队列）"><a href="#2-BFS（队列）" class="headerlink" title="2.BFS（队列）"></a>2.BFS（队列）</h3><h3 id="3-基础剪枝"><a href="#3-基础剪枝" class="headerlink" title="3.基础剪枝"></a>3.基础剪枝</h3>]]></content>
  </entry>
</search>
